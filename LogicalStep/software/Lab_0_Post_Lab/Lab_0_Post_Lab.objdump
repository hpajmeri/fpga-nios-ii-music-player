
Lab_0_Post_Lab.elf:     file format elf32-littlenios2
Lab_0_Post_Lab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004448 memsz 0x00004448 flags r-x
    LOAD off    0x00005468 vaddr 0x00804468 paddr 0x00805d0c align 2**12
         filesz 0x000018a4 memsz 0x000018a4 flags rw-
    LOAD off    0x000075b0 vaddr 0x008075b0 paddr 0x008075b0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003f24  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000300  00804168  00804168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000018a4  00804468  00805d0c  00005468  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  008075b0  008075b0  000075b0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  008076d0  008076d0  00006d0c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006d0c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000710  00000000  00000000  00006d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000097eb  00000000  00000000  00007440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003579  00000000  00000000  00010c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003a6f  00000000  00000000  000141a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f30  00000000  00000000  00017c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002336  00000000  00000000  00018b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b87  00000000  00000000  0001ae7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001ba04  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000138  00000000  00000000  0001ba68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001dceb  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001dcee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001dcfa  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001dcfb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001dcfc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001dd00  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001dd04  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001dd08  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001dd13  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001dd1e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0001dd29  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  0001dd2c  2**0
                  CONTENTS, READONLY
 29 .jdi          00003c54  00000000  00000000  0001dd51  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fff9  00000000  00000000  000219a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00804168 l    d  .rodata	00000000 .rodata
00804468 l    d  .rwdata	00000000 .rwdata
008075b0 l    d  .bss	00000000 .bss
008076d0 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab_0_Post_Lab_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00800308 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00800464 l     F .text	00000038 alt_dev_reg
00804468 l     O .rwdata	00001060 jtag_uart_0
008054c8 l     O .rwdata	00000120 lcd_display
008055e8 l     O .rwdata	000000c4 uart
008056ac l     O .rwdata	00000030 audio_i2c_config
008056dc l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080079c l     F .text	00000208 altera_avalon_jtag_uart_irq
008009a4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00805cd8 l     O .rwdata	00000004 colstart
00800fc4 l     F .text	000000b4 lcd_write_command
00801078 l     F .text	000000d4 lcd_write_data
0080114c l     F .text	000000cc lcd_clear_screen
00801218 l     F .text	000001e8 lcd_repaint_screen
00801400 l     F .text	000000c8 lcd_scroll_up
008014c8 l     F .text	000002a0 lcd_handle_escape
00801c50 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00801e94 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080213c l     F .text	0000009c altera_avalon_uart_irq
008021d8 l     F .text	000000e0 altera_avalon_uart_rxirq
008022b8 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00802450 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080267c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008029b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802b1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00802b48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00802d24 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080300c l     F .text	00000050 alt_get_errno
0080305c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008042e1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
008058b4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00804008 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
008075c8 g     O .bss	00000004 alt_instruction_exception_handler
008003ec g     F .text	00000078 alt_main
008075d0 g     O .bss	00000100 alt_irq
00805d0c g       *ABS*	00000000 __flash_rwdata_start
008034ac g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008075cc g     O .bss	00000004 errno
008075b4 g     O .bss	00000004 alt_argv
0080dcd8 g       *ABS*	00000000 _gp
0080347c g     F .text	00000030 usleep
00805734 g     O .rwdata	00000180 alt_fd_list
00803624 g     F .text	00000090 alt_find_dev
00803a6c g     F .text	00000138 memcpy
00802de4 g     F .text	00000078 alt_io_redirect
00804168 g       *ABS*	00000000 __DTOR_END__
00803908 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00800ba0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804124 g     F .text	00000008 .hidden __udivsi3
0080387c g     F .text	0000008c alt_icache_flush
00805cec g     O .rwdata	00000004 alt_max_fd
00802e5c g     F .text	000001b0 alt_irq_register
00805d04 g     O .rwdata	00000004 _global_impure_ptr
008076d0 g       *ABS*	00000000 __bss_end
00803378 g     F .text	00000104 alt_tick
0080209c g     F .text	000000a0 altera_avalon_uart_init
008032e0 g     F .text	00000098 alt_alarm_stop
008075bc g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080570c g     O .rwdata	00000028 alt_dev_null
00802ad8 g     F .text	00000044 alt_dcache_flush_all
00805d0c g       *ABS*	00000000 __ram_rwdata_end
00805ce4 g     O .rwdata	00000008 alt_dev_list
00804468 g       *ABS*	00000000 __ram_rodata_end
0080412c g     F .text	00000008 .hidden __umodsi3
008076d0 g       *ABS*	00000000 end
00801768 g     F .text	000004e8 altera_avalon_lcd_16207_write
008026cc g     F .text	000001ac altera_avalon_uart_write
008006e4 g     F .text	000000b8 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00804168 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00801f0c g     F .text	00000080 alt_avalon_timer_sc_init
00801fec g     F .text	00000060 altera_avalon_uart_write_fd
0080204c g     F .text	00000050 altera_avalon_uart_close_fd
00800dac g     F .text	00000218 altera_avalon_jtag_uart_write
00803e74 g     F .text	00000194 __call_exitprocs
00800244 g     F .text	0000004c _start
008075c0 g     O .bss	00000004 _alt_tick_rate
008075c4 g     O .bss	00000004 _alt_nticks
008004d0 g     F .text	000000b0 alt_sys_init
00803d60 g     F .text	00000114 __register_exitproc
00800a4c g     F .text	00000068 altera_avalon_jtag_uart_close
00804468 g       *ABS*	00000000 __ram_rwdata_start
00804168 g       *ABS*	00000000 __ram_rodata_start
00800580 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008037c8 g     F .text	000000b4 alt_get_fd
008034cc g     F .text	00000158 alt_busy_sleep
008039f0 g     F .text	0000007c memcmp
00800640 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008076d0 g       *ABS*	00000000 __alt_stack_base
00800690 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008036b4 g     F .text	00000114 alt_find_file
00802b98 g     F .text	000000a4 alt_dev_llist_insert
008075b0 g       *ABS*	00000000 __bss_start
00803ba4 g     F .text	00000124 memset
00800290 g     F .text	00000078 main
008075b8 g     O .bss	00000004 alt_envp
008005e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00801cfc g     F .text	00000138 altera_avalon_lcd_16207_init
00805cf0 g     O .rwdata	00000004 alt_errno
00804074 g     F .text	00000054 .hidden __divsi3
00804168 g       *ABS*	00000000 __CTOR_END__
00804168 g       *ABS*	00000000 __flash_rodata_start
00804168 g       *ABS*	00000000 __DTOR_LIST__
0080049c g     F .text	00000034 alt_irq_init
00803280 g     F .text	00000060 alt_release_fd
008039a4 g     F .text	00000014 atexit
00805d08 g     O .rwdata	00000004 _impure_ptr
008075b0 g     O .bss	00000004 alt_argc
00802c98 g     F .text	0000005c _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00801e34 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00805cdc g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805d0c g       *ABS*	00000000 _edata
00801f8c g     F .text	00000060 altera_avalon_uart_read_fd
008076d0 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00800ab4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
008039b8 g     F .text	00000038 exit
008040c8 g     F .text	0000005c .hidden __modsi3
00805d00 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008041e0 g     O .rodata	00000101 _ctype_
008023fc g     F .text	00000054 altera_avalon_uart_close
00804134 g     F .text	00000034 _exit
00802878 g     F .text	00000140 alt_alarm_start
00803cc8 g     F .text	00000098 strlen
00803128 g     F .text	00000158 open
00802cf4 g     F .text	00000030 alt_icache_flush_all
00805cf4 g     O .rwdata	00000004 alt_priority_mask
008024a0 g     F .text	000001dc altera_avalon_uart_read
00805cf8 g     O .rwdata	00000008 alt_alarm_list
00802c3c g     F .text	0000005c _do_ctors
00802a08 g     F .text	000000d0 close
0080036c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802034 	movhi	r2,128
  800140:	109d7404 	addi	r2,r2,30160
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	109d7404 	addi	r2,r2,30160
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a63c17 	ldw	r2,-26384(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a63c17 	ldw	r2,-26384(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6b73614 	ori	gp,gp,56536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	109d6c14 	ori	r2,r2,30128

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18ddb414 	ori	r3,r3,30416

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080036c0 	call	80036c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08003ec0 	call	8003ec <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"


int main()
{
  800290:	defffd04 	addi	sp,sp,-12
  800294:	df000215 	stw	fp,8(sp)
  800298:	df000204 	addi	fp,sp,8
	IOWR(LED_PIO_BASE,0,0x0);
  80029c:	0007883a 	mov	r3,zero
  8002a0:	00804034 	movhi	r2,256
  8002a4:	10844c04 	addi	r2,r2,4400
  8002a8:	10c00035 	stwio	r3,0(r2)
	while (1)
	{
		int buttons = IORD(BUTTON_PIO_BASE,0);
  8002ac:	00804034 	movhi	r2,256
  8002b0:	10844804 	addi	r2,r2,4384
  8002b4:	10800037 	ldwio	r2,0(r2)
  8002b8:	e0bffe15 	stw	r2,-8(fp)
		// if buttons = b'1110 ;  button is on
		int switches = IORD(SWITCH_PIO_BASE,0 );
  8002bc:	00804034 	movhi	r2,256
  8002c0:	10844404 	addi	r2,r2,4368
  8002c4:	10800037 	ldwio	r2,0(r2)
  8002c8:	e0bfff15 	stw	r2,-4(fp)
		// if switches = b'1111 1110 ; switch 0 is "down"
		if(buttons == 14)
  8002cc:	e0bffe17 	ldw	r2,-8(fp)
  8002d0:	10800398 	cmpnei	r2,r2,14
  8002d4:	1000041e 	bne	r2,zero,8002e8 <main+0x58>
		{
			IOWR(LED_PIO_BASE,0,0xF);
  8002d8:	00c003c4 	movi	r3,15
  8002dc:	00804034 	movhi	r2,256
  8002e0:	10844c04 	addi	r2,r2,4400
  8002e4:	10c00035 	stwio	r3,0(r2)
		}
		if(buttons == 13)
  8002e8:	e0bffe17 	ldw	r2,-8(fp)
  8002ec:	10800358 	cmpnei	r2,r2,13
  8002f0:	1000041e 	bne	r2,zero,800304 <main+0x74>
		{
			IOWR(LED_PIO_BASE,0,0x0);
  8002f4:	0007883a 	mov	r3,zero
  8002f8:	00804034 	movhi	r2,256
  8002fc:	10844c04 	addi	r2,r2,4400
  800300:	10c00035 	stwio	r3,0(r2)
		}
	}
  800304:	003fe906 	br	8002ac <__alt_data_end+0xff8002ac>

00800308 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800308:	defffc04 	addi	sp,sp,-16
  80030c:	df000315 	stw	fp,12(sp)
  800310:	df000304 	addi	fp,sp,12
  800314:	e13ffd15 	stw	r4,-12(fp)
  800318:	e17ffe15 	stw	r5,-8(fp)
  80031c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800320:	e0fffe17 	ldw	r3,-8(fp)
  800324:	e0bffd17 	ldw	r2,-12(fp)
  800328:	18800c26 	beq	r3,r2,80035c <alt_load_section+0x54>
  {
    while( to != end )
  80032c:	00000806 	br	800350 <alt_load_section+0x48>
    {
      *to++ = *from++;
  800330:	e0bffe17 	ldw	r2,-8(fp)
  800334:	10c00104 	addi	r3,r2,4
  800338:	e0fffe15 	stw	r3,-8(fp)
  80033c:	e0fffd17 	ldw	r3,-12(fp)
  800340:	19000104 	addi	r4,r3,4
  800344:	e13ffd15 	stw	r4,-12(fp)
  800348:	18c00017 	ldw	r3,0(r3)
  80034c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800350:	e0fffe17 	ldw	r3,-8(fp)
  800354:	e0bfff17 	ldw	r2,-4(fp)
  800358:	18bff51e 	bne	r3,r2,800330 <__alt_data_end+0xff800330>
    {
      *to++ = *from++;
    }
  }
}
  80035c:	e037883a 	mov	sp,fp
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00104 	addi	sp,sp,4
  800368:	f800283a 	ret

0080036c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80036c:	defffe04 	addi	sp,sp,-8
  800370:	dfc00115 	stw	ra,4(sp)
  800374:	df000015 	stw	fp,0(sp)
  800378:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80037c:	01002034 	movhi	r4,128
  800380:	21174304 	addi	r4,r4,23820
  800384:	01402034 	movhi	r5,128
  800388:	29511a04 	addi	r5,r5,17512
  80038c:	01802034 	movhi	r6,128
  800390:	31974304 	addi	r6,r6,23820
  800394:	08003080 	call	800308 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800398:	01002034 	movhi	r4,128
  80039c:	21000804 	addi	r4,r4,32
  8003a0:	01402034 	movhi	r5,128
  8003a4:	29400804 	addi	r5,r5,32
  8003a8:	01802034 	movhi	r6,128
  8003ac:	31809104 	addi	r6,r6,580
  8003b0:	08003080 	call	800308 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8003b4:	01002034 	movhi	r4,128
  8003b8:	21105a04 	addi	r4,r4,16744
  8003bc:	01402034 	movhi	r5,128
  8003c0:	29505a04 	addi	r5,r5,16744
  8003c4:	01802034 	movhi	r6,128
  8003c8:	31911a04 	addi	r6,r6,17512
  8003cc:	08003080 	call	800308 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8003d0:	0802ad80 	call	802ad8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8003d4:	0802cf40 	call	802cf4 <alt_icache_flush_all>
}
  8003d8:	e037883a 	mov	sp,fp
  8003dc:	dfc00117 	ldw	ra,4(sp)
  8003e0:	df000017 	ldw	fp,0(sp)
  8003e4:	dec00204 	addi	sp,sp,8
  8003e8:	f800283a 	ret

008003ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8003ec:	defffd04 	addi	sp,sp,-12
  8003f0:	dfc00215 	stw	ra,8(sp)
  8003f4:	df000115 	stw	fp,4(sp)
  8003f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8003fc:	0009883a 	mov	r4,zero
  800400:	080049c0 	call	80049c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800404:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800408:	08004d00 	call	8004d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80040c:	01002034 	movhi	r4,128
  800410:	21105a04 	addi	r4,r4,16744
  800414:	01402034 	movhi	r5,128
  800418:	29505a04 	addi	r5,r5,16744
  80041c:	01802034 	movhi	r6,128
  800420:	31905a04 	addi	r6,r6,16744
  800424:	0802de40 	call	802de4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  800428:	0802c3c0 	call	802c3c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80042c:	01002034 	movhi	r4,128
  800430:	210b2604 	addi	r4,r4,11416
  800434:	08039a40 	call	8039a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  800438:	d1263617 	ldw	r4,-26408(gp)
  80043c:	d0e63717 	ldw	r3,-26404(gp)
  800440:	d0a63817 	ldw	r2,-26400(gp)
  800444:	180b883a 	mov	r5,r3
  800448:	100d883a 	mov	r6,r2
  80044c:	08002900 	call	800290 <main>
  800450:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  800454:	01000044 	movi	r4,1
  800458:	0802a080 	call	802a08 <close>
  exit (result);
  80045c:	e13fff17 	ldw	r4,-4(fp)
  800460:	08039b80 	call	8039b8 <exit>

00800464 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  800464:	defffd04 	addi	sp,sp,-12
  800468:	dfc00215 	stw	ra,8(sp)
  80046c:	df000115 	stw	fp,4(sp)
  800470:	df000104 	addi	fp,sp,4
  800474:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800478:	e13fff17 	ldw	r4,-4(fp)
  80047c:	01402034 	movhi	r5,128
  800480:	29573904 	addi	r5,r5,23780
  800484:	0802b980 	call	802b98 <alt_dev_llist_insert>
}
  800488:	e037883a 	mov	sp,fp
  80048c:	dfc00117 	ldw	ra,4(sp)
  800490:	df000017 	ldw	fp,0(sp)
  800494:	dec00204 	addi	sp,sp,8
  800498:	f800283a 	ret

0080049c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80049c:	defffd04 	addi	sp,sp,-12
  8004a0:	dfc00215 	stw	ra,8(sp)
  8004a4:	df000115 	stw	fp,4(sp)
  8004a8:	df000104 	addi	fp,sp,4
  8004ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  8004b0:	08034ac0 	call	8034ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8004b4:	00800044 	movi	r2,1
  8004b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8004bc:	e037883a 	mov	sp,fp
  8004c0:	dfc00117 	ldw	ra,4(sp)
  8004c4:	df000017 	ldw	fp,0(sp)
  8004c8:	dec00204 	addi	sp,sp,8
  8004cc:	f800283a 	ret

008004d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8004d0:	defffe04 	addi	sp,sp,-8
  8004d4:	dfc00115 	stw	ra,4(sp)
  8004d8:	df000015 	stw	fp,0(sp)
  8004dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  8004e0:	01004034 	movhi	r4,256
  8004e4:	21042004 	addi	r4,r4,4224
  8004e8:	000b883a 	mov	r5,zero
  8004ec:	01800104 	movi	r6,4
  8004f0:	01c0fa04 	movi	r7,1000
  8004f4:	0801f0c0 	call	801f0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8004f8:	01002034 	movhi	r4,128
  8004fc:	21112404 	addi	r4,r4,17552
  800500:	000b883a 	mov	r5,zero
  800504:	000d883a 	mov	r6,zero
  800508:	08006e40 	call	8006e4 <altera_avalon_jtag_uart_init>
  80050c:	01002034 	movhi	r4,128
  800510:	21111a04 	addi	r4,r4,17512
  800514:	08004640 	call	800464 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  800518:	01002034 	movhi	r4,128
  80051c:	21153c04 	addi	r4,r4,21744
  800520:	0801cfc0 	call	801cfc <altera_avalon_lcd_16207_init>
  800524:	01002034 	movhi	r4,128
  800528:	21153204 	addi	r4,r4,21704
  80052c:	08004640 	call	800464 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  800530:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  800534:	01002034 	movhi	r4,128
  800538:	21158404 	addi	r4,r4,22032
  80053c:	000b883a 	mov	r5,zero
  800540:	018000c4 	movi	r6,3
  800544:	080209c0 	call	80209c <altera_avalon_uart_init>
  800548:	01002034 	movhi	r4,128
  80054c:	21157a04 	addi	r4,r4,21992
  800550:	08004640 	call	800464 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  800554:	01002034 	movhi	r4,128
  800558:	2115ab04 	addi	r4,r4,22188
  80055c:	08004640 	call	800464 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  800560:	01002034 	movhi	r4,128
  800564:	2115b704 	addi	r4,r4,22236
  800568:	08004640 	call	800464 <alt_dev_reg>
}
  80056c:	e037883a 	mov	sp,fp
  800570:	dfc00117 	ldw	ra,4(sp)
  800574:	df000017 	ldw	fp,0(sp)
  800578:	dec00204 	addi	sp,sp,8
  80057c:	f800283a 	ret

00800580 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800580:	defffa04 	addi	sp,sp,-24
  800584:	dfc00515 	stw	ra,20(sp)
  800588:	df000415 	stw	fp,16(sp)
  80058c:	df000404 	addi	fp,sp,16
  800590:	e13ffd15 	stw	r4,-12(fp)
  800594:	e17ffe15 	stw	r5,-8(fp)
  800598:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80059c:	e0bffd17 	ldw	r2,-12(fp)
  8005a0:	10800017 	ldw	r2,0(r2)
  8005a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8005a8:	e0bffc17 	ldw	r2,-16(fp)
  8005ac:	10c00a04 	addi	r3,r2,40
  8005b0:	e0bffd17 	ldw	r2,-12(fp)
  8005b4:	10800217 	ldw	r2,8(r2)
  8005b8:	1809883a 	mov	r4,r3
  8005bc:	e17ffe17 	ldw	r5,-8(fp)
  8005c0:	e1bfff17 	ldw	r6,-4(fp)
  8005c4:	100f883a 	mov	r7,r2
  8005c8:	0800ba00 	call	800ba0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8005cc:	e037883a 	mov	sp,fp
  8005d0:	dfc00117 	ldw	ra,4(sp)
  8005d4:	df000017 	ldw	fp,0(sp)
  8005d8:	dec00204 	addi	sp,sp,8
  8005dc:	f800283a 	ret

008005e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8005e0:	defffa04 	addi	sp,sp,-24
  8005e4:	dfc00515 	stw	ra,20(sp)
  8005e8:	df000415 	stw	fp,16(sp)
  8005ec:	df000404 	addi	fp,sp,16
  8005f0:	e13ffd15 	stw	r4,-12(fp)
  8005f4:	e17ffe15 	stw	r5,-8(fp)
  8005f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8005fc:	e0bffd17 	ldw	r2,-12(fp)
  800600:	10800017 	ldw	r2,0(r2)
  800604:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800608:	e0bffc17 	ldw	r2,-16(fp)
  80060c:	10c00a04 	addi	r3,r2,40
  800610:	e0bffd17 	ldw	r2,-12(fp)
  800614:	10800217 	ldw	r2,8(r2)
  800618:	1809883a 	mov	r4,r3
  80061c:	e17ffe17 	ldw	r5,-8(fp)
  800620:	e1bfff17 	ldw	r6,-4(fp)
  800624:	100f883a 	mov	r7,r2
  800628:	0800dac0 	call	800dac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80062c:	e037883a 	mov	sp,fp
  800630:	dfc00117 	ldw	ra,4(sp)
  800634:	df000017 	ldw	fp,0(sp)
  800638:	dec00204 	addi	sp,sp,8
  80063c:	f800283a 	ret

00800640 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  800640:	defffc04 	addi	sp,sp,-16
  800644:	dfc00315 	stw	ra,12(sp)
  800648:	df000215 	stw	fp,8(sp)
  80064c:	df000204 	addi	fp,sp,8
  800650:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800654:	e0bfff17 	ldw	r2,-4(fp)
  800658:	10800017 	ldw	r2,0(r2)
  80065c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  800660:	e0bffe17 	ldw	r2,-8(fp)
  800664:	10c00a04 	addi	r3,r2,40
  800668:	e0bfff17 	ldw	r2,-4(fp)
  80066c:	10800217 	ldw	r2,8(r2)
  800670:	1809883a 	mov	r4,r3
  800674:	100b883a 	mov	r5,r2
  800678:	0800a4c0 	call	800a4c <altera_avalon_jtag_uart_close>
}
  80067c:	e037883a 	mov	sp,fp
  800680:	dfc00117 	ldw	ra,4(sp)
  800684:	df000017 	ldw	fp,0(sp)
  800688:	dec00204 	addi	sp,sp,8
  80068c:	f800283a 	ret

00800690 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  800690:	defffa04 	addi	sp,sp,-24
  800694:	dfc00515 	stw	ra,20(sp)
  800698:	df000415 	stw	fp,16(sp)
  80069c:	df000404 	addi	fp,sp,16
  8006a0:	e13ffd15 	stw	r4,-12(fp)
  8006a4:	e17ffe15 	stw	r5,-8(fp)
  8006a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8006ac:	e0bffd17 	ldw	r2,-12(fp)
  8006b0:	10800017 	ldw	r2,0(r2)
  8006b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8006b8:	e0bffc17 	ldw	r2,-16(fp)
  8006bc:	10800a04 	addi	r2,r2,40
  8006c0:	1009883a 	mov	r4,r2
  8006c4:	e17ffe17 	ldw	r5,-8(fp)
  8006c8:	e1bfff17 	ldw	r6,-4(fp)
  8006cc:	0800ab40 	call	800ab4 <altera_avalon_jtag_uart_ioctl>
}
  8006d0:	e037883a 	mov	sp,fp
  8006d4:	dfc00117 	ldw	ra,4(sp)
  8006d8:	df000017 	ldw	fp,0(sp)
  8006dc:	dec00204 	addi	sp,sp,8
  8006e0:	f800283a 	ret

008006e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8006e4:	defffb04 	addi	sp,sp,-20
  8006e8:	dfc00415 	stw	ra,16(sp)
  8006ec:	df000315 	stw	fp,12(sp)
  8006f0:	df000304 	addi	fp,sp,12
  8006f4:	e13ffd15 	stw	r4,-12(fp)
  8006f8:	e17ffe15 	stw	r5,-8(fp)
  8006fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800700:	e0bffd17 	ldw	r2,-12(fp)
  800704:	00c00044 	movi	r3,1
  800708:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80070c:	e0bffd17 	ldw	r2,-12(fp)
  800710:	10800017 	ldw	r2,0(r2)
  800714:	10800104 	addi	r2,r2,4
  800718:	1007883a 	mov	r3,r2
  80071c:	e0bffd17 	ldw	r2,-12(fp)
  800720:	10800817 	ldw	r2,32(r2)
  800724:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  800728:	e0bfff17 	ldw	r2,-4(fp)
  80072c:	1009883a 	mov	r4,r2
  800730:	e17ffd17 	ldw	r5,-12(fp)
  800734:	01802034 	movhi	r6,128
  800738:	3181e704 	addi	r6,r6,1948
  80073c:	0802e5c0 	call	802e5c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  800740:	e0bffd17 	ldw	r2,-12(fp)
  800744:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  800748:	e0bffd17 	ldw	r2,-12(fp)
  80074c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800750:	00802034 	movhi	r2,128
  800754:	109d7004 	addi	r2,r2,30144
  800758:	10800017 	ldw	r2,0(r2)
  80075c:	1809883a 	mov	r4,r3
  800760:	100b883a 	mov	r5,r2
  800764:	01802034 	movhi	r6,128
  800768:	31826904 	addi	r6,r6,2468
  80076c:	e1fffd17 	ldw	r7,-12(fp)
  800770:	08028780 	call	802878 <alt_alarm_start>
  800774:	1000040e 	bge	r2,zero,800788 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  800778:	e0fffd17 	ldw	r3,-12(fp)
  80077c:	00a00034 	movhi	r2,32768
  800780:	10bfffc4 	addi	r2,r2,-1
  800784:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  800788:	e037883a 	mov	sp,fp
  80078c:	dfc00117 	ldw	ra,4(sp)
  800790:	df000017 	ldw	fp,0(sp)
  800794:	dec00204 	addi	sp,sp,8
  800798:	f800283a 	ret

0080079c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80079c:	defff704 	addi	sp,sp,-36
  8007a0:	df000815 	stw	fp,32(sp)
  8007a4:	df000804 	addi	fp,sp,32
  8007a8:	e13ffe15 	stw	r4,-8(fp)
  8007ac:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8007b0:	e0bffe17 	ldw	r2,-8(fp)
  8007b4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  8007b8:	e0bffa17 	ldw	r2,-24(fp)
  8007bc:	10800017 	ldw	r2,0(r2)
  8007c0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8007c4:	e0bffb17 	ldw	r2,-20(fp)
  8007c8:	10800104 	addi	r2,r2,4
  8007cc:	10800037 	ldwio	r2,0(r2)
  8007d0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8007d4:	e0bffc17 	ldw	r2,-16(fp)
  8007d8:	1080c00c 	andi	r2,r2,768
  8007dc:	1000011e 	bne	r2,zero,8007e4 <altera_avalon_jtag_uart_irq+0x48>
      break;
  8007e0:	00006c06 	br	800994 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8007e4:	e0bffc17 	ldw	r2,-16(fp)
  8007e8:	1080400c 	andi	r2,r2,256
  8007ec:	10003426 	beq	r2,zero,8008c0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8007f0:	00800074 	movhi	r2,1
  8007f4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8007f8:	e0bffa17 	ldw	r2,-24(fp)
  8007fc:	10800a17 	ldw	r2,40(r2)
  800800:	10800044 	addi	r2,r2,1
  800804:	1081ffcc 	andi	r2,r2,2047
  800808:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  80080c:	e0bffa17 	ldw	r2,-24(fp)
  800810:	10c00b17 	ldw	r3,44(r2)
  800814:	e0bffd17 	ldw	r2,-12(fp)
  800818:	1880011e 	bne	r3,r2,800820 <altera_avalon_jtag_uart_irq+0x84>
          break;
  80081c:	00001606 	br	800878 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  800820:	e0bffb17 	ldw	r2,-20(fp)
  800824:	10800037 	ldwio	r2,0(r2)
  800828:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80082c:	e0bff817 	ldw	r2,-32(fp)
  800830:	10a0000c 	andi	r2,r2,32768
  800834:	1000011e 	bne	r2,zero,80083c <altera_avalon_jtag_uart_irq+0xa0>
          break;
  800838:	00000f06 	br	800878 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80083c:	e0bffa17 	ldw	r2,-24(fp)
  800840:	10800a17 	ldw	r2,40(r2)
  800844:	e0fff817 	ldw	r3,-32(fp)
  800848:	1809883a 	mov	r4,r3
  80084c:	e0fffa17 	ldw	r3,-24(fp)
  800850:	1885883a 	add	r2,r3,r2
  800854:	10800e04 	addi	r2,r2,56
  800858:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80085c:	e0bffa17 	ldw	r2,-24(fp)
  800860:	10800a17 	ldw	r2,40(r2)
  800864:	10800044 	addi	r2,r2,1
  800868:	10c1ffcc 	andi	r3,r2,2047
  80086c:	e0bffa17 	ldw	r2,-24(fp)
  800870:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  800874:	003fe006 	br	8007f8 <__alt_data_end+0xff8007f8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  800878:	e0bff817 	ldw	r2,-32(fp)
  80087c:	10bfffec 	andhi	r2,r2,65535
  800880:	10000f26 	beq	r2,zero,8008c0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800884:	e0bffa17 	ldw	r2,-24(fp)
  800888:	10c00817 	ldw	r3,32(r2)
  80088c:	00bfff84 	movi	r2,-2
  800890:	1886703a 	and	r3,r3,r2
  800894:	e0bffa17 	ldw	r2,-24(fp)
  800898:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80089c:	e0bffb17 	ldw	r2,-20(fp)
  8008a0:	10800104 	addi	r2,r2,4
  8008a4:	1007883a 	mov	r3,r2
  8008a8:	e0bffa17 	ldw	r2,-24(fp)
  8008ac:	10800817 	ldw	r2,32(r2)
  8008b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8008b4:	e0bffb17 	ldw	r2,-20(fp)
  8008b8:	10800104 	addi	r2,r2,4
  8008bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8008c0:	e0bffc17 	ldw	r2,-16(fp)
  8008c4:	1080800c 	andi	r2,r2,512
  8008c8:	10003126 	beq	r2,zero,800990 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8008cc:	e0bffc17 	ldw	r2,-16(fp)
  8008d0:	1004d43a 	srli	r2,r2,16
  8008d4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8008d8:	00001406 	br	80092c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8008dc:	e0bffb17 	ldw	r2,-20(fp)
  8008e0:	e0fffa17 	ldw	r3,-24(fp)
  8008e4:	18c00d17 	ldw	r3,52(r3)
  8008e8:	e13ffa17 	ldw	r4,-24(fp)
  8008ec:	20c7883a 	add	r3,r4,r3
  8008f0:	18c20e04 	addi	r3,r3,2104
  8008f4:	18c00003 	ldbu	r3,0(r3)
  8008f8:	18c03fcc 	andi	r3,r3,255
  8008fc:	18c0201c 	xori	r3,r3,128
  800900:	18ffe004 	addi	r3,r3,-128
  800904:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800908:	e0bffa17 	ldw	r2,-24(fp)
  80090c:	10800d17 	ldw	r2,52(r2)
  800910:	10800044 	addi	r2,r2,1
  800914:	10c1ffcc 	andi	r3,r2,2047
  800918:	e0bffa17 	ldw	r2,-24(fp)
  80091c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  800920:	e0bff917 	ldw	r2,-28(fp)
  800924:	10bfffc4 	addi	r2,r2,-1
  800928:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80092c:	e0bff917 	ldw	r2,-28(fp)
  800930:	10000526 	beq	r2,zero,800948 <altera_avalon_jtag_uart_irq+0x1ac>
  800934:	e0bffa17 	ldw	r2,-24(fp)
  800938:	10c00d17 	ldw	r3,52(r2)
  80093c:	e0bffa17 	ldw	r2,-24(fp)
  800940:	10800c17 	ldw	r2,48(r2)
  800944:	18bfe51e 	bne	r3,r2,8008dc <__alt_data_end+0xff8008dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  800948:	e0bff917 	ldw	r2,-28(fp)
  80094c:	10001026 	beq	r2,zero,800990 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800950:	e0bffa17 	ldw	r2,-24(fp)
  800954:	10c00817 	ldw	r3,32(r2)
  800958:	00bfff44 	movi	r2,-3
  80095c:	1886703a 	and	r3,r3,r2
  800960:	e0bffa17 	ldw	r2,-24(fp)
  800964:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800968:	e0bffa17 	ldw	r2,-24(fp)
  80096c:	10800017 	ldw	r2,0(r2)
  800970:	10800104 	addi	r2,r2,4
  800974:	1007883a 	mov	r3,r2
  800978:	e0bffa17 	ldw	r2,-24(fp)
  80097c:	10800817 	ldw	r2,32(r2)
  800980:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800984:	e0bffb17 	ldw	r2,-20(fp)
  800988:	10800104 	addi	r2,r2,4
  80098c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  800990:	003f8c06 	br	8007c4 <__alt_data_end+0xff8007c4>
}
  800994:	e037883a 	mov	sp,fp
  800998:	df000017 	ldw	fp,0(sp)
  80099c:	dec00104 	addi	sp,sp,4
  8009a0:	f800283a 	ret

008009a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8009a4:	defff804 	addi	sp,sp,-32
  8009a8:	df000715 	stw	fp,28(sp)
  8009ac:	df000704 	addi	fp,sp,28
  8009b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8009b4:	e0bffb17 	ldw	r2,-20(fp)
  8009b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8009bc:	e0bff917 	ldw	r2,-28(fp)
  8009c0:	10800017 	ldw	r2,0(r2)
  8009c4:	10800104 	addi	r2,r2,4
  8009c8:	10800037 	ldwio	r2,0(r2)
  8009cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8009d0:	e0bffa17 	ldw	r2,-24(fp)
  8009d4:	1081000c 	andi	r2,r2,1024
  8009d8:	10000b26 	beq	r2,zero,800a08 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8009dc:	e0bff917 	ldw	r2,-28(fp)
  8009e0:	10800017 	ldw	r2,0(r2)
  8009e4:	10800104 	addi	r2,r2,4
  8009e8:	1007883a 	mov	r3,r2
  8009ec:	e0bff917 	ldw	r2,-28(fp)
  8009f0:	10800817 	ldw	r2,32(r2)
  8009f4:	10810014 	ori	r2,r2,1024
  8009f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8009fc:	e0bff917 	ldw	r2,-28(fp)
  800a00:	10000915 	stw	zero,36(r2)
  800a04:	00000a06 	br	800a30 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  800a08:	e0bff917 	ldw	r2,-28(fp)
  800a0c:	10c00917 	ldw	r3,36(r2)
  800a10:	00a00034 	movhi	r2,32768
  800a14:	10bfff04 	addi	r2,r2,-4
  800a18:	10c00536 	bltu	r2,r3,800a30 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  800a1c:	e0bff917 	ldw	r2,-28(fp)
  800a20:	10800917 	ldw	r2,36(r2)
  800a24:	10c00044 	addi	r3,r2,1
  800a28:	e0bff917 	ldw	r2,-28(fp)
  800a2c:	10c00915 	stw	r3,36(r2)
  800a30:	00802034 	movhi	r2,128
  800a34:	109d7004 	addi	r2,r2,30144
  800a38:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  800a3c:	e037883a 	mov	sp,fp
  800a40:	df000017 	ldw	fp,0(sp)
  800a44:	dec00104 	addi	sp,sp,4
  800a48:	f800283a 	ret

00800a4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  800a4c:	defffd04 	addi	sp,sp,-12
  800a50:	df000215 	stw	fp,8(sp)
  800a54:	df000204 	addi	fp,sp,8
  800a58:	e13ffe15 	stw	r4,-8(fp)
  800a5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800a60:	00000506 	br	800a78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  800a64:	e0bfff17 	ldw	r2,-4(fp)
  800a68:	1090000c 	andi	r2,r2,16384
  800a6c:	10000226 	beq	r2,zero,800a78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  800a70:	00bffd44 	movi	r2,-11
  800a74:	00000b06 	br	800aa4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800a78:	e0bffe17 	ldw	r2,-8(fp)
  800a7c:	10c00d17 	ldw	r3,52(r2)
  800a80:	e0bffe17 	ldw	r2,-8(fp)
  800a84:	10800c17 	ldw	r2,48(r2)
  800a88:	18800526 	beq	r3,r2,800aa0 <altera_avalon_jtag_uart_close+0x54>
  800a8c:	e0bffe17 	ldw	r2,-8(fp)
  800a90:	10c00917 	ldw	r3,36(r2)
  800a94:	e0bffe17 	ldw	r2,-8(fp)
  800a98:	10800117 	ldw	r2,4(r2)
  800a9c:	18bff136 	bltu	r3,r2,800a64 <__alt_data_end+0xff800a64>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  800aa0:	0005883a 	mov	r2,zero
}
  800aa4:	e037883a 	mov	sp,fp
  800aa8:	df000017 	ldw	fp,0(sp)
  800aac:	dec00104 	addi	sp,sp,4
  800ab0:	f800283a 	ret

00800ab4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  800ab4:	defffa04 	addi	sp,sp,-24
  800ab8:	df000515 	stw	fp,20(sp)
  800abc:	df000504 	addi	fp,sp,20
  800ac0:	e13ffd15 	stw	r4,-12(fp)
  800ac4:	e17ffe15 	stw	r5,-8(fp)
  800ac8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  800acc:	00bff9c4 	movi	r2,-25
  800ad0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  800ad4:	e0bffe17 	ldw	r2,-8(fp)
  800ad8:	10da8060 	cmpeqi	r3,r2,27137
  800adc:	1800031e 	bne	r3,zero,800aec <altera_avalon_jtag_uart_ioctl+0x38>
  800ae0:	109a80a0 	cmpeqi	r2,r2,27138
  800ae4:	1000191e 	bne	r2,zero,800b4c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  800ae8:	00002806 	br	800b8c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  800aec:	e0bffd17 	ldw	r2,-12(fp)
  800af0:	10c00117 	ldw	r3,4(r2)
  800af4:	00a00034 	movhi	r2,32768
  800af8:	10bfffc4 	addi	r2,r2,-1
  800afc:	18801226 	beq	r3,r2,800b48 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  800b00:	e0bfff17 	ldw	r2,-4(fp)
  800b04:	10800017 	ldw	r2,0(r2)
  800b08:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  800b0c:	e0bffc17 	ldw	r2,-16(fp)
  800b10:	10800090 	cmplti	r2,r2,2
  800b14:	1000061e 	bne	r2,zero,800b30 <altera_avalon_jtag_uart_ioctl+0x7c>
  800b18:	e0fffc17 	ldw	r3,-16(fp)
  800b1c:	00a00034 	movhi	r2,32768
  800b20:	10bfffc4 	addi	r2,r2,-1
  800b24:	18800226 	beq	r3,r2,800b30 <altera_avalon_jtag_uart_ioctl+0x7c>
  800b28:	e0bffc17 	ldw	r2,-16(fp)
  800b2c:	00000206 	br	800b38 <altera_avalon_jtag_uart_ioctl+0x84>
  800b30:	00a00034 	movhi	r2,32768
  800b34:	10bfff84 	addi	r2,r2,-2
  800b38:	e0fffd17 	ldw	r3,-12(fp)
  800b3c:	18800115 	stw	r2,4(r3)
      rc = 0;
  800b40:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800b44:	00001106 	br	800b8c <altera_avalon_jtag_uart_ioctl+0xd8>
  800b48:	00001006 	br	800b8c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  800b4c:	e0bffd17 	ldw	r2,-12(fp)
  800b50:	10c00117 	ldw	r3,4(r2)
  800b54:	00a00034 	movhi	r2,32768
  800b58:	10bfffc4 	addi	r2,r2,-1
  800b5c:	18800a26 	beq	r3,r2,800b88 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  800b60:	e0bffd17 	ldw	r2,-12(fp)
  800b64:	10c00917 	ldw	r3,36(r2)
  800b68:	e0bffd17 	ldw	r2,-12(fp)
  800b6c:	10800117 	ldw	r2,4(r2)
  800b70:	1885803a 	cmpltu	r2,r3,r2
  800b74:	10c03fcc 	andi	r3,r2,255
  800b78:	e0bfff17 	ldw	r2,-4(fp)
  800b7c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  800b80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800b84:	00000006 	br	800b88 <altera_avalon_jtag_uart_ioctl+0xd4>
  800b88:	0001883a 	nop

  default:
    break;
  }

  return rc;
  800b8c:	e0bffb17 	ldw	r2,-20(fp)
}
  800b90:	e037883a 	mov	sp,fp
  800b94:	df000017 	ldw	fp,0(sp)
  800b98:	dec00104 	addi	sp,sp,4
  800b9c:	f800283a 	ret

00800ba0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  800ba0:	defff304 	addi	sp,sp,-52
  800ba4:	dfc00c15 	stw	ra,48(sp)
  800ba8:	df000b15 	stw	fp,44(sp)
  800bac:	df000b04 	addi	fp,sp,44
  800bb0:	e13ffc15 	stw	r4,-16(fp)
  800bb4:	e17ffd15 	stw	r5,-12(fp)
  800bb8:	e1bffe15 	stw	r6,-8(fp)
  800bbc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  800bc0:	e0bffd17 	ldw	r2,-12(fp)
  800bc4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800bc8:	00004906 	br	800cf0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  800bcc:	e0bffc17 	ldw	r2,-16(fp)
  800bd0:	10800a17 	ldw	r2,40(r2)
  800bd4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  800bd8:	e0bffc17 	ldw	r2,-16(fp)
  800bdc:	10800b17 	ldw	r2,44(r2)
  800be0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  800be4:	e0fff717 	ldw	r3,-36(fp)
  800be8:	e0bff817 	ldw	r2,-32(fp)
  800bec:	18800536 	bltu	r3,r2,800c04 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  800bf0:	e0fff717 	ldw	r3,-36(fp)
  800bf4:	e0bff817 	ldw	r2,-32(fp)
  800bf8:	1885c83a 	sub	r2,r3,r2
  800bfc:	e0bff615 	stw	r2,-40(fp)
  800c00:	00000406 	br	800c14 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  800c04:	00c20004 	movi	r3,2048
  800c08:	e0bff817 	ldw	r2,-32(fp)
  800c0c:	1885c83a 	sub	r2,r3,r2
  800c10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800c14:	e0bff617 	ldw	r2,-40(fp)
  800c18:	1000011e 	bne	r2,zero,800c20 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  800c1c:	00001d06 	br	800c94 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  800c20:	e0fffe17 	ldw	r3,-8(fp)
  800c24:	e0bff617 	ldw	r2,-40(fp)
  800c28:	1880022e 	bgeu	r3,r2,800c34 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  800c2c:	e0bffe17 	ldw	r2,-8(fp)
  800c30:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  800c34:	e0bff817 	ldw	r2,-32(fp)
  800c38:	10800e04 	addi	r2,r2,56
  800c3c:	e0fffc17 	ldw	r3,-16(fp)
  800c40:	1885883a 	add	r2,r3,r2
  800c44:	e13ff517 	ldw	r4,-44(fp)
  800c48:	100b883a 	mov	r5,r2
  800c4c:	e1bff617 	ldw	r6,-40(fp)
  800c50:	0803a6c0 	call	803a6c <memcpy>
      ptr   += n;
  800c54:	e0fff517 	ldw	r3,-44(fp)
  800c58:	e0bff617 	ldw	r2,-40(fp)
  800c5c:	1885883a 	add	r2,r3,r2
  800c60:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  800c64:	e0fffe17 	ldw	r3,-8(fp)
  800c68:	e0bff617 	ldw	r2,-40(fp)
  800c6c:	1885c83a 	sub	r2,r3,r2
  800c70:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800c74:	e0fff817 	ldw	r3,-32(fp)
  800c78:	e0bff617 	ldw	r2,-40(fp)
  800c7c:	1885883a 	add	r2,r3,r2
  800c80:	10c1ffcc 	andi	r3,r2,2047
  800c84:	e0bffc17 	ldw	r2,-16(fp)
  800c88:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  800c8c:	e0bffe17 	ldw	r2,-8(fp)
  800c90:	00bfce16 	blt	zero,r2,800bcc <__alt_data_end+0xff800bcc>

    /* If we read any data then return it */
    if (ptr != buffer)
  800c94:	e0fff517 	ldw	r3,-44(fp)
  800c98:	e0bffd17 	ldw	r2,-12(fp)
  800c9c:	18800126 	beq	r3,r2,800ca4 <altera_avalon_jtag_uart_read+0x104>
      break;
  800ca0:	00001506 	br	800cf8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  800ca4:	e0bfff17 	ldw	r2,-4(fp)
  800ca8:	1090000c 	andi	r2,r2,16384
  800cac:	10000126 	beq	r2,zero,800cb4 <altera_avalon_jtag_uart_read+0x114>
      break;
  800cb0:	00001106 	br	800cf8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  800cb4:	0001883a 	nop
  800cb8:	e0bffc17 	ldw	r2,-16(fp)
  800cbc:	10c00a17 	ldw	r3,40(r2)
  800cc0:	e0bff717 	ldw	r2,-36(fp)
  800cc4:	1880051e 	bne	r3,r2,800cdc <altera_avalon_jtag_uart_read+0x13c>
  800cc8:	e0bffc17 	ldw	r2,-16(fp)
  800ccc:	10c00917 	ldw	r3,36(r2)
  800cd0:	e0bffc17 	ldw	r2,-16(fp)
  800cd4:	10800117 	ldw	r2,4(r2)
  800cd8:	18bff736 	bltu	r3,r2,800cb8 <__alt_data_end+0xff800cb8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  800cdc:	e0bffc17 	ldw	r2,-16(fp)
  800ce0:	10c00a17 	ldw	r3,40(r2)
  800ce4:	e0bff717 	ldw	r2,-36(fp)
  800ce8:	1880011e 	bne	r3,r2,800cf0 <altera_avalon_jtag_uart_read+0x150>
      break;
  800cec:	00000206 	br	800cf8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800cf0:	e0bffe17 	ldw	r2,-8(fp)
  800cf4:	00bfb516 	blt	zero,r2,800bcc <__alt_data_end+0xff800bcc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  800cf8:	e0fff517 	ldw	r3,-44(fp)
  800cfc:	e0bffd17 	ldw	r2,-12(fp)
  800d00:	18801826 	beq	r3,r2,800d64 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800d04:	0005303a 	rdctl	r2,status
  800d08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800d0c:	e0fffa17 	ldw	r3,-24(fp)
  800d10:	00bfff84 	movi	r2,-2
  800d14:	1884703a 	and	r2,r3,r2
  800d18:	1001703a 	wrctl	status,r2
  
  return context;
  800d1c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  800d20:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800d24:	e0bffc17 	ldw	r2,-16(fp)
  800d28:	10800817 	ldw	r2,32(r2)
  800d2c:	10c00054 	ori	r3,r2,1
  800d30:	e0bffc17 	ldw	r2,-16(fp)
  800d34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800d38:	e0bffc17 	ldw	r2,-16(fp)
  800d3c:	10800017 	ldw	r2,0(r2)
  800d40:	10800104 	addi	r2,r2,4
  800d44:	1007883a 	mov	r3,r2
  800d48:	e0bffc17 	ldw	r2,-16(fp)
  800d4c:	10800817 	ldw	r2,32(r2)
  800d50:	18800035 	stwio	r2,0(r3)
  800d54:	e0bff917 	ldw	r2,-28(fp)
  800d58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800d5c:	e0bffb17 	ldw	r2,-20(fp)
  800d60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  800d64:	e0fff517 	ldw	r3,-44(fp)
  800d68:	e0bffd17 	ldw	r2,-12(fp)
  800d6c:	18800426 	beq	r3,r2,800d80 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  800d70:	e0fff517 	ldw	r3,-44(fp)
  800d74:	e0bffd17 	ldw	r2,-12(fp)
  800d78:	1885c83a 	sub	r2,r3,r2
  800d7c:	00000606 	br	800d98 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  800d80:	e0bfff17 	ldw	r2,-4(fp)
  800d84:	1090000c 	andi	r2,r2,16384
  800d88:	10000226 	beq	r2,zero,800d94 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  800d8c:	00bffd44 	movi	r2,-11
  800d90:	00000106 	br	800d98 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  800d94:	00bffec4 	movi	r2,-5
}
  800d98:	e037883a 	mov	sp,fp
  800d9c:	dfc00117 	ldw	ra,4(sp)
  800da0:	df000017 	ldw	fp,0(sp)
  800da4:	dec00204 	addi	sp,sp,8
  800da8:	f800283a 	ret

00800dac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  800dac:	defff304 	addi	sp,sp,-52
  800db0:	dfc00c15 	stw	ra,48(sp)
  800db4:	df000b15 	stw	fp,44(sp)
  800db8:	df000b04 	addi	fp,sp,44
  800dbc:	e13ffc15 	stw	r4,-16(fp)
  800dc0:	e17ffd15 	stw	r5,-12(fp)
  800dc4:	e1bffe15 	stw	r6,-8(fp)
  800dc8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  800dcc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  800dd0:	e0bffd17 	ldw	r2,-12(fp)
  800dd4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800dd8:	00003806 	br	800ebc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  800ddc:	e0bffc17 	ldw	r2,-16(fp)
  800de0:	10800c17 	ldw	r2,48(r2)
  800de4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  800de8:	e0bffc17 	ldw	r2,-16(fp)
  800dec:	10800d17 	ldw	r2,52(r2)
  800df0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  800df4:	e0fff817 	ldw	r3,-32(fp)
  800df8:	e0bff517 	ldw	r2,-44(fp)
  800dfc:	1880062e 	bgeu	r3,r2,800e18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  800e00:	e0fff517 	ldw	r3,-44(fp)
  800e04:	e0bff817 	ldw	r2,-32(fp)
  800e08:	1885c83a 	sub	r2,r3,r2
  800e0c:	10bfffc4 	addi	r2,r2,-1
  800e10:	e0bff615 	stw	r2,-40(fp)
  800e14:	00000b06 	br	800e44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  800e18:	e0bff517 	ldw	r2,-44(fp)
  800e1c:	10000526 	beq	r2,zero,800e34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  800e20:	00c20004 	movi	r3,2048
  800e24:	e0bff817 	ldw	r2,-32(fp)
  800e28:	1885c83a 	sub	r2,r3,r2
  800e2c:	e0bff615 	stw	r2,-40(fp)
  800e30:	00000406 	br	800e44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  800e34:	00c1ffc4 	movi	r3,2047
  800e38:	e0bff817 	ldw	r2,-32(fp)
  800e3c:	1885c83a 	sub	r2,r3,r2
  800e40:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800e44:	e0bff617 	ldw	r2,-40(fp)
  800e48:	1000011e 	bne	r2,zero,800e50 <altera_avalon_jtag_uart_write+0xa4>
        break;
  800e4c:	00001d06 	br	800ec4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  800e50:	e0fffe17 	ldw	r3,-8(fp)
  800e54:	e0bff617 	ldw	r2,-40(fp)
  800e58:	1880022e 	bgeu	r3,r2,800e64 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  800e5c:	e0bffe17 	ldw	r2,-8(fp)
  800e60:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  800e64:	e0bff817 	ldw	r2,-32(fp)
  800e68:	10820e04 	addi	r2,r2,2104
  800e6c:	e0fffc17 	ldw	r3,-16(fp)
  800e70:	1885883a 	add	r2,r3,r2
  800e74:	1009883a 	mov	r4,r2
  800e78:	e17ffd17 	ldw	r5,-12(fp)
  800e7c:	e1bff617 	ldw	r6,-40(fp)
  800e80:	0803a6c0 	call	803a6c <memcpy>
      ptr   += n;
  800e84:	e0fffd17 	ldw	r3,-12(fp)
  800e88:	e0bff617 	ldw	r2,-40(fp)
  800e8c:	1885883a 	add	r2,r3,r2
  800e90:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  800e94:	e0fffe17 	ldw	r3,-8(fp)
  800e98:	e0bff617 	ldw	r2,-40(fp)
  800e9c:	1885c83a 	sub	r2,r3,r2
  800ea0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800ea4:	e0fff817 	ldw	r3,-32(fp)
  800ea8:	e0bff617 	ldw	r2,-40(fp)
  800eac:	1885883a 	add	r2,r3,r2
  800eb0:	10c1ffcc 	andi	r3,r2,2047
  800eb4:	e0bffc17 	ldw	r2,-16(fp)
  800eb8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800ebc:	e0bffe17 	ldw	r2,-8(fp)
  800ec0:	00bfc616 	blt	zero,r2,800ddc <__alt_data_end+0xff800ddc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800ec4:	0005303a 	rdctl	r2,status
  800ec8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800ecc:	e0fffa17 	ldw	r3,-24(fp)
  800ed0:	00bfff84 	movi	r2,-2
  800ed4:	1884703a 	and	r2,r3,r2
  800ed8:	1001703a 	wrctl	status,r2
  
  return context;
  800edc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  800ee0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800ee4:	e0bffc17 	ldw	r2,-16(fp)
  800ee8:	10800817 	ldw	r2,32(r2)
  800eec:	10c00094 	ori	r3,r2,2
  800ef0:	e0bffc17 	ldw	r2,-16(fp)
  800ef4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800ef8:	e0bffc17 	ldw	r2,-16(fp)
  800efc:	10800017 	ldw	r2,0(r2)
  800f00:	10800104 	addi	r2,r2,4
  800f04:	1007883a 	mov	r3,r2
  800f08:	e0bffc17 	ldw	r2,-16(fp)
  800f0c:	10800817 	ldw	r2,32(r2)
  800f10:	18800035 	stwio	r2,0(r3)
  800f14:	e0bff917 	ldw	r2,-28(fp)
  800f18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800f1c:	e0bffb17 	ldw	r2,-20(fp)
  800f20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  800f24:	e0bffe17 	ldw	r2,-8(fp)
  800f28:	0080120e 	bge	zero,r2,800f74 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  800f2c:	e0bfff17 	ldw	r2,-4(fp)
  800f30:	1090000c 	andi	r2,r2,16384
  800f34:	10000126 	beq	r2,zero,800f3c <altera_avalon_jtag_uart_write+0x190>
        break;
  800f38:	00001006 	br	800f7c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  800f3c:	0001883a 	nop
  800f40:	e0bffc17 	ldw	r2,-16(fp)
  800f44:	10c00d17 	ldw	r3,52(r2)
  800f48:	e0bff517 	ldw	r2,-44(fp)
  800f4c:	1880051e 	bne	r3,r2,800f64 <altera_avalon_jtag_uart_write+0x1b8>
  800f50:	e0bffc17 	ldw	r2,-16(fp)
  800f54:	10c00917 	ldw	r3,36(r2)
  800f58:	e0bffc17 	ldw	r2,-16(fp)
  800f5c:	10800117 	ldw	r2,4(r2)
  800f60:	18bff736 	bltu	r3,r2,800f40 <__alt_data_end+0xff800f40>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  800f64:	e0bffc17 	ldw	r2,-16(fp)
  800f68:	10800917 	ldw	r2,36(r2)
  800f6c:	10000126 	beq	r2,zero,800f74 <altera_avalon_jtag_uart_write+0x1c8>
         break;
  800f70:	00000206 	br	800f7c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  800f74:	e0bffe17 	ldw	r2,-8(fp)
  800f78:	00bf9716 	blt	zero,r2,800dd8 <__alt_data_end+0xff800dd8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  800f7c:	e0fffd17 	ldw	r3,-12(fp)
  800f80:	e0bff717 	ldw	r2,-36(fp)
  800f84:	18800426 	beq	r3,r2,800f98 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  800f88:	e0fffd17 	ldw	r3,-12(fp)
  800f8c:	e0bff717 	ldw	r2,-36(fp)
  800f90:	1885c83a 	sub	r2,r3,r2
  800f94:	00000606 	br	800fb0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  800f98:	e0bfff17 	ldw	r2,-4(fp)
  800f9c:	1090000c 	andi	r2,r2,16384
  800fa0:	10000226 	beq	r2,zero,800fac <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  800fa4:	00bffd44 	movi	r2,-11
  800fa8:	00000106 	br	800fb0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  800fac:	00bffec4 	movi	r2,-5
}
  800fb0:	e037883a 	mov	sp,fp
  800fb4:	dfc00117 	ldw	ra,4(sp)
  800fb8:	df000017 	ldw	fp,0(sp)
  800fbc:	dec00204 	addi	sp,sp,8
  800fc0:	f800283a 	ret

00800fc4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  800fc4:	defffa04 	addi	sp,sp,-24
  800fc8:	dfc00515 	stw	ra,20(sp)
  800fcc:	df000415 	stw	fp,16(sp)
  800fd0:	df000404 	addi	fp,sp,16
  800fd4:	e13ffe15 	stw	r4,-8(fp)
  800fd8:	2805883a 	mov	r2,r5
  800fdc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  800fe0:	e0bffe17 	ldw	r2,-8(fp)
  800fe4:	10800017 	ldw	r2,0(r2)
  800fe8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  800fec:	008003f4 	movhi	r2,15
  800ff0:	10909004 	addi	r2,r2,16960
  800ff4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  800ff8:	e0bffe17 	ldw	r2,-8(fp)
  800ffc:	10800803 	ldbu	r2,32(r2)
  801000:	10803fcc 	andi	r2,r2,255
  801004:	1080201c 	xori	r2,r2,128
  801008:	10bfe004 	addi	r2,r2,-128
  80100c:	10000126 	beq	r2,zero,801014 <lcd_write_command+0x50>
    return;
  801010:	00001406 	br	801064 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801014:	00000906 	br	80103c <lcd_write_command+0x78>
    if (--i == 0)
  801018:	e0bffc17 	ldw	r2,-16(fp)
  80101c:	10bfffc4 	addi	r2,r2,-1
  801020:	e0bffc15 	stw	r2,-16(fp)
  801024:	e0bffc17 	ldw	r2,-16(fp)
  801028:	1000041e 	bne	r2,zero,80103c <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80102c:	e0bffe17 	ldw	r2,-8(fp)
  801030:	00c00044 	movi	r3,1
  801034:	10c00805 	stb	r3,32(r2)
      return;
  801038:	00000a06 	br	801064 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80103c:	e0bffd17 	ldw	r2,-12(fp)
  801040:	10800104 	addi	r2,r2,4
  801044:	10800037 	ldwio	r2,0(r2)
  801048:	1080200c 	andi	r2,r2,128
  80104c:	103ff21e 	bne	r2,zero,801018 <__alt_data_end+0xff801018>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801050:	01001904 	movi	r4,100
  801054:	080347c0 	call	80347c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  801058:	e0bffd17 	ldw	r2,-12(fp)
  80105c:	e0ffff03 	ldbu	r3,-4(fp)
  801060:	10c00035 	stwio	r3,0(r2)
}
  801064:	e037883a 	mov	sp,fp
  801068:	dfc00117 	ldw	ra,4(sp)
  80106c:	df000017 	ldw	fp,0(sp)
  801070:	dec00204 	addi	sp,sp,8
  801074:	f800283a 	ret

00801078 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  801078:	defffa04 	addi	sp,sp,-24
  80107c:	dfc00515 	stw	ra,20(sp)
  801080:	df000415 	stw	fp,16(sp)
  801084:	df000404 	addi	fp,sp,16
  801088:	e13ffe15 	stw	r4,-8(fp)
  80108c:	2805883a 	mov	r2,r5
  801090:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801094:	e0bffe17 	ldw	r2,-8(fp)
  801098:	10800017 	ldw	r2,0(r2)
  80109c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8010a0:	008003f4 	movhi	r2,15
  8010a4:	10909004 	addi	r2,r2,16960
  8010a8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8010ac:	e0bffe17 	ldw	r2,-8(fp)
  8010b0:	10800803 	ldbu	r2,32(r2)
  8010b4:	10803fcc 	andi	r2,r2,255
  8010b8:	1080201c 	xori	r2,r2,128
  8010bc:	10bfe004 	addi	r2,r2,-128
  8010c0:	10000126 	beq	r2,zero,8010c8 <lcd_write_data+0x50>
    return;
  8010c4:	00001c06 	br	801138 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8010c8:	00000906 	br	8010f0 <lcd_write_data+0x78>
    if (--i == 0)
  8010cc:	e0bffc17 	ldw	r2,-16(fp)
  8010d0:	10bfffc4 	addi	r2,r2,-1
  8010d4:	e0bffc15 	stw	r2,-16(fp)
  8010d8:	e0bffc17 	ldw	r2,-16(fp)
  8010dc:	1000041e 	bne	r2,zero,8010f0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8010e0:	e0bffe17 	ldw	r2,-8(fp)
  8010e4:	00c00044 	movi	r3,1
  8010e8:	10c00805 	stb	r3,32(r2)
      return;
  8010ec:	00001206 	br	801138 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8010f0:	e0bffd17 	ldw	r2,-12(fp)
  8010f4:	10800104 	addi	r2,r2,4
  8010f8:	10800037 	ldwio	r2,0(r2)
  8010fc:	1080200c 	andi	r2,r2,128
  801100:	103ff21e 	bne	r2,zero,8010cc <__alt_data_end+0xff8010cc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801104:	01001904 	movi	r4,100
  801108:	080347c0 	call	80347c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80110c:	e0bffd17 	ldw	r2,-12(fp)
  801110:	10800204 	addi	r2,r2,8
  801114:	1007883a 	mov	r3,r2
  801118:	e0bfff03 	ldbu	r2,-4(fp)
  80111c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  801120:	e0bffe17 	ldw	r2,-8(fp)
  801124:	108008c3 	ldbu	r2,35(r2)
  801128:	10800044 	addi	r2,r2,1
  80112c:	1007883a 	mov	r3,r2
  801130:	e0bffe17 	ldw	r2,-8(fp)
  801134:	10c008c5 	stb	r3,35(r2)
}
  801138:	e037883a 	mov	sp,fp
  80113c:	dfc00117 	ldw	ra,4(sp)
  801140:	df000017 	ldw	fp,0(sp)
  801144:	dec00204 	addi	sp,sp,8
  801148:	f800283a 	ret

0080114c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80114c:	defffc04 	addi	sp,sp,-16
  801150:	dfc00315 	stw	ra,12(sp)
  801154:	df000215 	stw	fp,8(sp)
  801158:	df000204 	addi	fp,sp,8
  80115c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  801160:	e13fff17 	ldw	r4,-4(fp)
  801164:	01400044 	movi	r5,1
  801168:	0800fc40 	call	800fc4 <lcd_write_command>

  sp->x = 0;
  80116c:	e0bfff17 	ldw	r2,-4(fp)
  801170:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  801174:	e0bfff17 	ldw	r2,-4(fp)
  801178:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80117c:	e0bfff17 	ldw	r2,-4(fp)
  801180:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801184:	e03ffe15 	stw	zero,-8(fp)
  801188:	00001b06 	br	8011f8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80118c:	e0bffe17 	ldw	r2,-8(fp)
  801190:	108018e4 	muli	r2,r2,99
  801194:	10801004 	addi	r2,r2,64
  801198:	e0ffff17 	ldw	r3,-4(fp)
  80119c:	1885883a 	add	r2,r3,r2
  8011a0:	1009883a 	mov	r4,r2
  8011a4:	01400804 	movi	r5,32
  8011a8:	01801444 	movi	r6,81
  8011ac:	0803ba40 	call	803ba4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8011b0:	e0bffe17 	ldw	r2,-8(fp)
  8011b4:	108018e4 	muli	r2,r2,99
  8011b8:	10800c04 	addi	r2,r2,48
  8011bc:	e0ffff17 	ldw	r3,-4(fp)
  8011c0:	1885883a 	add	r2,r3,r2
  8011c4:	1009883a 	mov	r4,r2
  8011c8:	01400804 	movi	r5,32
  8011cc:	01800404 	movi	r6,16
  8011d0:	0803ba40 	call	803ba4 <memset>
    sp->line[y].width = 0;
  8011d4:	e0ffff17 	ldw	r3,-4(fp)
  8011d8:	e0bffe17 	ldw	r2,-8(fp)
  8011dc:	108018e4 	muli	r2,r2,99
  8011e0:	10802404 	addi	r2,r2,144
  8011e4:	1885883a 	add	r2,r3,r2
  8011e8:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8011ec:	e0bffe17 	ldw	r2,-8(fp)
  8011f0:	10800044 	addi	r2,r2,1
  8011f4:	e0bffe15 	stw	r2,-8(fp)
  8011f8:	e0bffe17 	ldw	r2,-8(fp)
  8011fc:	10800090 	cmplti	r2,r2,2
  801200:	103fe21e 	bne	r2,zero,80118c <__alt_data_end+0xff80118c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  801204:	e037883a 	mov	sp,fp
  801208:	dfc00117 	ldw	ra,4(sp)
  80120c:	df000017 	ldw	fp,0(sp)
  801210:	dec00204 	addi	sp,sp,8
  801214:	f800283a 	ret

00801218 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  801218:	defff704 	addi	sp,sp,-36
  80121c:	dfc00815 	stw	ra,32(sp)
  801220:	df000715 	stw	fp,28(sp)
  801224:	df000704 	addi	fp,sp,28
  801228:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80122c:	e0bfff17 	ldw	r2,-4(fp)
  801230:	10800943 	ldbu	r2,37(r2)
  801234:	10803fcc 	andi	r2,r2,255
  801238:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80123c:	e03ff915 	stw	zero,-28(fp)
  801240:	00006706 	br	8013e0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  801244:	e0ffff17 	ldw	r3,-4(fp)
  801248:	e0bff917 	ldw	r2,-28(fp)
  80124c:	108018e4 	muli	r2,r2,99
  801250:	10802404 	addi	r2,r2,144
  801254:	1885883a 	add	r2,r3,r2
  801258:	10800043 	ldbu	r2,1(r2)
  80125c:	10803fcc 	andi	r2,r2,255
  801260:	1080201c 	xori	r2,r2,128
  801264:	10bfe004 	addi	r2,r2,-128
  801268:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80126c:	e0ffff17 	ldw	r3,-4(fp)
  801270:	e0bff917 	ldw	r2,-28(fp)
  801274:	108018e4 	muli	r2,r2,99
  801278:	10802404 	addi	r2,r2,144
  80127c:	1885883a 	add	r2,r3,r2
  801280:	10800083 	ldbu	r2,2(r2)
  801284:	10c03fcc 	andi	r3,r2,255
  801288:	e0bffc17 	ldw	r2,-16(fp)
  80128c:	1885383a 	mul	r2,r3,r2
  801290:	1005d23a 	srai	r2,r2,8
  801294:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  801298:	e0fffb17 	ldw	r3,-20(fp)
  80129c:	e0bffd17 	ldw	r2,-12(fp)
  8012a0:	18800116 	blt	r3,r2,8012a8 <lcd_repaint_screen+0x90>
      offset = 0;
  8012a4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8012a8:	e03ffa15 	stw	zero,-24(fp)
  8012ac:	00004606 	br	8013c8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8012b0:	e0fffa17 	ldw	r3,-24(fp)
  8012b4:	e0bffb17 	ldw	r2,-20(fp)
  8012b8:	1885883a 	add	r2,r3,r2
  8012bc:	1009883a 	mov	r4,r2
  8012c0:	e17ffd17 	ldw	r5,-12(fp)
  8012c4:	08040c80 	call	8040c8 <__modsi3>
  8012c8:	1009883a 	mov	r4,r2
  8012cc:	e0ffff17 	ldw	r3,-4(fp)
  8012d0:	e0bff917 	ldw	r2,-28(fp)
  8012d4:	108018e4 	muli	r2,r2,99
  8012d8:	1885883a 	add	r2,r3,r2
  8012dc:	1105883a 	add	r2,r2,r4
  8012e0:	10801004 	addi	r2,r2,64
  8012e4:	10800003 	ldbu	r2,0(r2)
  8012e8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8012ec:	e0ffff17 	ldw	r3,-4(fp)
  8012f0:	e0bff917 	ldw	r2,-28(fp)
  8012f4:	108018e4 	muli	r2,r2,99
  8012f8:	1887883a 	add	r3,r3,r2
  8012fc:	e0bffa17 	ldw	r2,-24(fp)
  801300:	1885883a 	add	r2,r3,r2
  801304:	10800c04 	addi	r2,r2,48
  801308:	10800003 	ldbu	r2,0(r2)
  80130c:	10c03fcc 	andi	r3,r2,255
  801310:	18c0201c 	xori	r3,r3,128
  801314:	18ffe004 	addi	r3,r3,-128
  801318:	e0bffe07 	ldb	r2,-8(fp)
  80131c:	18802726 	beq	r3,r2,8013bc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  801320:	e0fff917 	ldw	r3,-28(fp)
  801324:	d0a00004 	addi	r2,gp,-32768
  801328:	1885883a 	add	r2,r3,r2
  80132c:	10800003 	ldbu	r2,0(r2)
  801330:	1007883a 	mov	r3,r2
  801334:	e0bffa17 	ldw	r2,-24(fp)
  801338:	1885883a 	add	r2,r3,r2
  80133c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  801340:	e0fffe43 	ldbu	r3,-7(fp)
  801344:	e0bfff17 	ldw	r2,-4(fp)
  801348:	108008c3 	ldbu	r2,35(r2)
  80134c:	10803fcc 	andi	r2,r2,255
  801350:	1080201c 	xori	r2,r2,128
  801354:	10bfe004 	addi	r2,r2,-128
  801358:	18800a26 	beq	r3,r2,801384 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80135c:	e0fffe43 	ldbu	r3,-7(fp)
  801360:	00bfe004 	movi	r2,-128
  801364:	1884b03a 	or	r2,r3,r2
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	e13fff17 	ldw	r4,-4(fp)
  801370:	100b883a 	mov	r5,r2
  801374:	0800fc40 	call	800fc4 <lcd_write_command>
          sp->address = address;
  801378:	e0fffe43 	ldbu	r3,-7(fp)
  80137c:	e0bfff17 	ldw	r2,-4(fp)
  801380:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  801384:	e0bffe03 	ldbu	r2,-8(fp)
  801388:	10803fcc 	andi	r2,r2,255
  80138c:	e13fff17 	ldw	r4,-4(fp)
  801390:	100b883a 	mov	r5,r2
  801394:	08010780 	call	801078 <lcd_write_data>
        sp->line[y].visible[x] = c;
  801398:	e0ffff17 	ldw	r3,-4(fp)
  80139c:	e0bff917 	ldw	r2,-28(fp)
  8013a0:	108018e4 	muli	r2,r2,99
  8013a4:	1887883a 	add	r3,r3,r2
  8013a8:	e0bffa17 	ldw	r2,-24(fp)
  8013ac:	1885883a 	add	r2,r3,r2
  8013b0:	10800c04 	addi	r2,r2,48
  8013b4:	e0fffe03 	ldbu	r3,-8(fp)
  8013b8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8013bc:	e0bffa17 	ldw	r2,-24(fp)
  8013c0:	10800044 	addi	r2,r2,1
  8013c4:	e0bffa15 	stw	r2,-24(fp)
  8013c8:	e0bffa17 	ldw	r2,-24(fp)
  8013cc:	10800410 	cmplti	r2,r2,16
  8013d0:	103fb71e 	bne	r2,zero,8012b0 <__alt_data_end+0xff8012b0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8013d4:	e0bff917 	ldw	r2,-28(fp)
  8013d8:	10800044 	addi	r2,r2,1
  8013dc:	e0bff915 	stw	r2,-28(fp)
  8013e0:	e0bff917 	ldw	r2,-28(fp)
  8013e4:	10800090 	cmplti	r2,r2,2
  8013e8:	103f961e 	bne	r2,zero,801244 <__alt_data_end+0xff801244>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8013ec:	e037883a 	mov	sp,fp
  8013f0:	dfc00117 	ldw	ra,4(sp)
  8013f4:	df000017 	ldw	fp,0(sp)
  8013f8:	dec00204 	addi	sp,sp,8
  8013fc:	f800283a 	ret

00801400 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  801400:	defffc04 	addi	sp,sp,-16
  801404:	dfc00315 	stw	ra,12(sp)
  801408:	df000215 	stw	fp,8(sp)
  80140c:	df000204 	addi	fp,sp,8
  801410:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801414:	e03ffe15 	stw	zero,-8(fp)
  801418:	00001d06 	br	801490 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80141c:	e0bffe17 	ldw	r2,-8(fp)
  801420:	00800f16 	blt	zero,r2,801460 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  801424:	e0bffe17 	ldw	r2,-8(fp)
  801428:	108018e4 	muli	r2,r2,99
  80142c:	10801004 	addi	r2,r2,64
  801430:	e0ffff17 	ldw	r3,-4(fp)
  801434:	1889883a 	add	r4,r3,r2
  801438:	e0bffe17 	ldw	r2,-8(fp)
  80143c:	10800044 	addi	r2,r2,1
  801440:	108018e4 	muli	r2,r2,99
  801444:	10801004 	addi	r2,r2,64
  801448:	e0ffff17 	ldw	r3,-4(fp)
  80144c:	1885883a 	add	r2,r3,r2
  801450:	100b883a 	mov	r5,r2
  801454:	01801404 	movi	r6,80
  801458:	0803a6c0 	call	803a6c <memcpy>
  80145c:	00000906 	br	801484 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  801460:	e0bffe17 	ldw	r2,-8(fp)
  801464:	108018e4 	muli	r2,r2,99
  801468:	10801004 	addi	r2,r2,64
  80146c:	e0ffff17 	ldw	r3,-4(fp)
  801470:	1885883a 	add	r2,r3,r2
  801474:	1009883a 	mov	r4,r2
  801478:	01400804 	movi	r5,32
  80147c:	01801404 	movi	r6,80
  801480:	0803ba40 	call	803ba4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801484:	e0bffe17 	ldw	r2,-8(fp)
  801488:	10800044 	addi	r2,r2,1
  80148c:	e0bffe15 	stw	r2,-8(fp)
  801490:	e0bffe17 	ldw	r2,-8(fp)
  801494:	10800090 	cmplti	r2,r2,2
  801498:	103fe01e 	bne	r2,zero,80141c <__alt_data_end+0xff80141c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80149c:	e0bfff17 	ldw	r2,-4(fp)
  8014a0:	10800883 	ldbu	r2,34(r2)
  8014a4:	10bfffc4 	addi	r2,r2,-1
  8014a8:	1007883a 	mov	r3,r2
  8014ac:	e0bfff17 	ldw	r2,-4(fp)
  8014b0:	10c00885 	stb	r3,34(r2)
}
  8014b4:	e037883a 	mov	sp,fp
  8014b8:	dfc00117 	ldw	ra,4(sp)
  8014bc:	df000017 	ldw	fp,0(sp)
  8014c0:	dec00204 	addi	sp,sp,8
  8014c4:	f800283a 	ret

008014c8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8014c8:	defff904 	addi	sp,sp,-28
  8014cc:	dfc00615 	stw	ra,24(sp)
  8014d0:	df000515 	stw	fp,20(sp)
  8014d4:	df000504 	addi	fp,sp,20
  8014d8:	e13ffe15 	stw	r4,-8(fp)
  8014dc:	2805883a 	mov	r2,r5
  8014e0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8014e4:	e03ffb15 	stw	zero,-20(fp)
  8014e8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8014ec:	e0bffe17 	ldw	r2,-8(fp)
  8014f0:	10800a03 	ldbu	r2,40(r2)
  8014f4:	10803fcc 	andi	r2,r2,255
  8014f8:	1080201c 	xori	r2,r2,128
  8014fc:	10bfe004 	addi	r2,r2,-128
  801500:	108016d8 	cmpnei	r2,r2,91
  801504:	1000441e 	bne	r2,zero,801618 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  801508:	e0bffe17 	ldw	r2,-8(fp)
  80150c:	10800a44 	addi	r2,r2,41
  801510:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  801514:	00000c06 	br	801548 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  801518:	e0bffb17 	ldw	r2,-20(fp)
  80151c:	10c002a4 	muli	r3,r2,10
  801520:	e0bffd17 	ldw	r2,-12(fp)
  801524:	11000044 	addi	r4,r2,1
  801528:	e13ffd15 	stw	r4,-12(fp)
  80152c:	10800003 	ldbu	r2,0(r2)
  801530:	10803fcc 	andi	r2,r2,255
  801534:	1080201c 	xori	r2,r2,128
  801538:	10bfe004 	addi	r2,r2,-128
  80153c:	10bff404 	addi	r2,r2,-48
  801540:	1885883a 	add	r2,r3,r2
  801544:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  801548:	00802034 	movhi	r2,128
  80154c:	10974004 	addi	r2,r2,23808
  801550:	10c00017 	ldw	r3,0(r2)
  801554:	e0bffd17 	ldw	r2,-12(fp)
  801558:	10800003 	ldbu	r2,0(r2)
  80155c:	10803fcc 	andi	r2,r2,255
  801560:	1080201c 	xori	r2,r2,128
  801564:	10bfe004 	addi	r2,r2,-128
  801568:	10800044 	addi	r2,r2,1
  80156c:	1885883a 	add	r2,r3,r2
  801570:	10800003 	ldbu	r2,0(r2)
  801574:	10803fcc 	andi	r2,r2,255
  801578:	1080010c 	andi	r2,r2,4
  80157c:	103fe61e 	bne	r2,zero,801518 <__alt_data_end+0xff801518>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  801580:	e0bffd17 	ldw	r2,-12(fp)
  801584:	10800003 	ldbu	r2,0(r2)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	1080201c 	xori	r2,r2,128
  801590:	10bfe004 	addi	r2,r2,-128
  801594:	10800ed8 	cmpnei	r2,r2,59
  801598:	10001e1e 	bne	r2,zero,801614 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80159c:	e0bffd17 	ldw	r2,-12(fp)
  8015a0:	10800044 	addi	r2,r2,1
  8015a4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8015a8:	00000c06 	br	8015dc <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8015ac:	e0bffc17 	ldw	r2,-16(fp)
  8015b0:	10c002a4 	muli	r3,r2,10
  8015b4:	e0bffd17 	ldw	r2,-12(fp)
  8015b8:	11000044 	addi	r4,r2,1
  8015bc:	e13ffd15 	stw	r4,-12(fp)
  8015c0:	10800003 	ldbu	r2,0(r2)
  8015c4:	10803fcc 	andi	r2,r2,255
  8015c8:	1080201c 	xori	r2,r2,128
  8015cc:	10bfe004 	addi	r2,r2,-128
  8015d0:	10bff404 	addi	r2,r2,-48
  8015d4:	1885883a 	add	r2,r3,r2
  8015d8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8015dc:	00802034 	movhi	r2,128
  8015e0:	10974004 	addi	r2,r2,23808
  8015e4:	10c00017 	ldw	r3,0(r2)
  8015e8:	e0bffd17 	ldw	r2,-12(fp)
  8015ec:	10800003 	ldbu	r2,0(r2)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	10800044 	addi	r2,r2,1
  801600:	1885883a 	add	r2,r3,r2
  801604:	10800003 	ldbu	r2,0(r2)
  801608:	10803fcc 	andi	r2,r2,255
  80160c:	1080010c 	andi	r2,r2,4
  801610:	103fe61e 	bne	r2,zero,8015ac <__alt_data_end+0xff8015ac>
  801614:	00000206 	br	801620 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801618:	00bfffc4 	movi	r2,-1
  80161c:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  801620:	e0bfff07 	ldb	r2,-4(fp)
  801624:	10c012a0 	cmpeqi	r3,r2,74
  801628:	1800281e 	bne	r3,zero,8016cc <lcd_handle_escape+0x204>
  80162c:	10c012c8 	cmpgei	r3,r2,75
  801630:	1800031e 	bne	r3,zero,801640 <lcd_handle_escape+0x178>
  801634:	10801220 	cmpeqi	r2,r2,72
  801638:	1000051e 	bne	r2,zero,801650 <lcd_handle_escape+0x188>
  80163c:	00004506 	br	801754 <lcd_handle_escape+0x28c>
  801640:	10c012e0 	cmpeqi	r3,r2,75
  801644:	1800281e 	bne	r3,zero,8016e8 <lcd_handle_escape+0x220>
  801648:	108019a0 	cmpeqi	r2,r2,102
  80164c:	10004126 	beq	r2,zero,801754 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  801650:	e0bffc17 	ldw	r2,-16(fp)
  801654:	0080050e 	bge	zero,r2,80166c <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	10bfffc4 	addi	r2,r2,-1
  801660:	1007883a 	mov	r3,r2
  801664:	e0bffe17 	ldw	r2,-8(fp)
  801668:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80166c:	e0bffb17 	ldw	r2,-20(fp)
  801670:	0080150e 	bge	zero,r2,8016c8 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  801674:	e0bffb17 	ldw	r2,-20(fp)
  801678:	10bfffc4 	addi	r2,r2,-1
  80167c:	1007883a 	mov	r3,r2
  801680:	e0bffe17 	ldw	r2,-8(fp)
  801684:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801688:	e0bffe17 	ldw	r2,-8(fp)
  80168c:	10800883 	ldbu	r2,34(r2)
  801690:	10803fcc 	andi	r2,r2,255
  801694:	10800170 	cmpltui	r2,r2,5
  801698:	1000031e 	bne	r2,zero,8016a8 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  80169c:	e0bffe17 	ldw	r2,-8(fp)
  8016a0:	00c00104 	movi	r3,4
  8016a4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8016a8:	00000206 	br	8016b4 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  8016ac:	e13ffe17 	ldw	r4,-8(fp)
  8016b0:	08014000 	call	801400 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8016b4:	e0bffe17 	ldw	r2,-8(fp)
  8016b8:	10800883 	ldbu	r2,34(r2)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	108000e8 	cmpgeui	r2,r2,3
  8016c4:	103ff91e 	bne	r2,zero,8016ac <__alt_data_end+0xff8016ac>
        lcd_scroll_up(sp);
    }
    break;
  8016c8:	00002206 	br	801754 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8016cc:	e0bffb17 	ldw	r2,-20(fp)
  8016d0:	10800098 	cmpnei	r2,r2,2
  8016d4:	1000031e 	bne	r2,zero,8016e4 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  8016d8:	e13ffe17 	ldw	r4,-8(fp)
  8016dc:	080114c0 	call	80114c <lcd_clear_screen>
    break;
  8016e0:	00001c06 	br	801754 <lcd_handle_escape+0x28c>
  8016e4:	00001b06 	br	801754 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8016e8:	e0bffb17 	ldw	r2,-20(fp)
  8016ec:	00801816 	blt	zero,r2,801750 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8016f0:	e0bffe17 	ldw	r2,-8(fp)
  8016f4:	10800843 	ldbu	r2,33(r2)
  8016f8:	10803fcc 	andi	r2,r2,255
  8016fc:	10801428 	cmpgeui	r2,r2,80
  801700:	1000131e 	bne	r2,zero,801750 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  801704:	e0bffe17 	ldw	r2,-8(fp)
  801708:	10800883 	ldbu	r2,34(r2)
  80170c:	10803fcc 	andi	r2,r2,255
  801710:	108018e4 	muli	r2,r2,99
  801714:	10801004 	addi	r2,r2,64
  801718:	e0fffe17 	ldw	r3,-8(fp)
  80171c:	1887883a 	add	r3,r3,r2
  801720:	e0bffe17 	ldw	r2,-8(fp)
  801724:	10800843 	ldbu	r2,33(r2)
  801728:	10803fcc 	andi	r2,r2,255
  80172c:	1889883a 	add	r4,r3,r2
  801730:	e0bffe17 	ldw	r2,-8(fp)
  801734:	10800843 	ldbu	r2,33(r2)
  801738:	10803fcc 	andi	r2,r2,255
  80173c:	00c01404 	movi	r3,80
  801740:	1885c83a 	sub	r2,r3,r2
  801744:	01400804 	movi	r5,32
  801748:	100d883a 	mov	r6,r2
  80174c:	0803ba40 	call	803ba4 <memset>
    }
    break;
  801750:	0001883a 	nop
  }
}
  801754:	e037883a 	mov	sp,fp
  801758:	dfc00117 	ldw	ra,4(sp)
  80175c:	df000017 	ldw	fp,0(sp)
  801760:	dec00204 	addi	sp,sp,8
  801764:	f800283a 	ret

00801768 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  801768:	defff304 	addi	sp,sp,-52
  80176c:	dfc00c15 	stw	ra,48(sp)
  801770:	df000b15 	stw	fp,44(sp)
  801774:	df000b04 	addi	fp,sp,44
  801778:	e13ffc15 	stw	r4,-16(fp)
  80177c:	e17ffd15 	stw	r5,-12(fp)
  801780:	e1bffe15 	stw	r6,-8(fp)
  801784:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801788:	e0bffe17 	ldw	r2,-8(fp)
  80178c:	e0fffd17 	ldw	r3,-12(fp)
  801790:	1885883a 	add	r2,r3,r2
  801794:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801798:	e0bffc17 	ldw	r2,-16(fp)
  80179c:	00c00044 	movi	r3,1
  8017a0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8017a4:	00009e06 	br	801a20 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  8017a8:	e0bffd17 	ldw	r2,-12(fp)
  8017ac:	10800003 	ldbu	r2,0(r2)
  8017b0:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8017b4:	e0bffc17 	ldw	r2,-16(fp)
  8017b8:	10800903 	ldbu	r2,36(r2)
  8017bc:	10803fcc 	andi	r2,r2,255
  8017c0:	1080201c 	xori	r2,r2,128
  8017c4:	10bfe004 	addi	r2,r2,-128
  8017c8:	10003a16 	blt	r2,zero,8018b4 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10800903 	ldbu	r2,36(r2)
  8017d4:	10803fcc 	andi	r2,r2,255
  8017d8:	1080201c 	xori	r2,r2,128
  8017dc:	10bfe004 	addi	r2,r2,-128
  8017e0:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8017e4:	e0bffa17 	ldw	r2,-24(fp)
  8017e8:	1000031e 	bne	r2,zero,8017f8 <altera_avalon_lcd_16207_write+0x90>
  8017ec:	e0bff907 	ldb	r2,-28(fp)
  8017f0:	108016d8 	cmpnei	r2,r2,91
  8017f4:	10000f1e 	bne	r2,zero,801834 <altera_avalon_lcd_16207_write+0xcc>
  8017f8:	e0bffa17 	ldw	r2,-24(fp)
  8017fc:	10001a26 	beq	r2,zero,801868 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  801800:	00802034 	movhi	r2,128
  801804:	10974004 	addi	r2,r2,23808
  801808:	10c00017 	ldw	r3,0(r2)
  80180c:	e0bff907 	ldb	r2,-28(fp)
  801810:	10800044 	addi	r2,r2,1
  801814:	1885883a 	add	r2,r3,r2
  801818:	10800003 	ldbu	r2,0(r2)
  80181c:	10803fcc 	andi	r2,r2,255
  801820:	1080010c 	andi	r2,r2,4
  801824:	1000101e 	bne	r2,zero,801868 <altera_avalon_lcd_16207_write+0x100>
  801828:	e0bff907 	ldb	r2,-28(fp)
  80182c:	10800ee0 	cmpeqi	r2,r2,59
  801830:	10000d1e 	bne	r2,zero,801868 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  801834:	e0fffc17 	ldw	r3,-16(fp)
  801838:	e0bffa17 	ldw	r2,-24(fp)
  80183c:	1885883a 	add	r2,r3,r2
  801840:	10800a04 	addi	r2,r2,40
  801844:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  801848:	e0bff907 	ldb	r2,-28(fp)
  80184c:	e13ffc17 	ldw	r4,-16(fp)
  801850:	100b883a 	mov	r5,r2
  801854:	08014c80 	call	8014c8 <lcd_handle_escape>

        sp->esccount = -1;
  801858:	e0bffc17 	ldw	r2,-16(fp)
  80185c:	00ffffc4 	movi	r3,-1
  801860:	10c00905 	stb	r3,36(r2)
  801864:	00001206 	br	8018b0 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  801868:	e0bffc17 	ldw	r2,-16(fp)
  80186c:	10800903 	ldbu	r2,36(r2)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	108001e8 	cmpgeui	r2,r2,7
  801878:	10000d1e 	bne	r2,zero,8018b0 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  80187c:	e0fffc17 	ldw	r3,-16(fp)
  801880:	e0bffa17 	ldw	r2,-24(fp)
  801884:	1885883a 	add	r2,r3,r2
  801888:	10800a04 	addi	r2,r2,40
  80188c:	e0fff903 	ldbu	r3,-28(fp)
  801890:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  801894:	e0bffc17 	ldw	r2,-16(fp)
  801898:	10800903 	ldbu	r2,36(r2)
  80189c:	10800044 	addi	r2,r2,1
  8018a0:	1007883a 	mov	r3,r2
  8018a4:	e0bffc17 	ldw	r2,-16(fp)
  8018a8:	10c00905 	stb	r3,36(r2)
  8018ac:	00005906 	br	801a14 <altera_avalon_lcd_16207_write+0x2ac>
  8018b0:	00005806 	br	801a14 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  8018b4:	e0bff907 	ldb	r2,-28(fp)
  8018b8:	108006d8 	cmpnei	r2,r2,27
  8018bc:	1000031e 	bne	r2,zero,8018cc <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  8018c0:	e0bffc17 	ldw	r2,-16(fp)
  8018c4:	10000905 	stb	zero,36(r2)
  8018c8:	00005206 	br	801a14 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  8018cc:	e0bff907 	ldb	r2,-28(fp)
  8018d0:	10800358 	cmpnei	r2,r2,13
  8018d4:	1000031e 	bne	r2,zero,8018e4 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10000845 	stb	zero,33(r2)
  8018e0:	00004c06 	br	801a14 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  8018e4:	e0bff907 	ldb	r2,-28(fp)
  8018e8:	10800298 	cmpnei	r2,r2,10
  8018ec:	1000101e 	bne	r2,zero,801930 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  8018f0:	e0bffc17 	ldw	r2,-16(fp)
  8018f4:	10000845 	stb	zero,33(r2)
      sp->y++;
  8018f8:	e0bffc17 	ldw	r2,-16(fp)
  8018fc:	10800883 	ldbu	r2,34(r2)
  801900:	10800044 	addi	r2,r2,1
  801904:	1007883a 	mov	r3,r2
  801908:	e0bffc17 	ldw	r2,-16(fp)
  80190c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  801910:	e0bffc17 	ldw	r2,-16(fp)
  801914:	10800883 	ldbu	r2,34(r2)
  801918:	10803fcc 	andi	r2,r2,255
  80191c:	108000f0 	cmpltui	r2,r2,3
  801920:	10003c1e 	bne	r2,zero,801a14 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  801924:	e13ffc17 	ldw	r4,-16(fp)
  801928:	08014000 	call	801400 <lcd_scroll_up>
  80192c:	00003906 	br	801a14 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  801930:	e0bff907 	ldb	r2,-28(fp)
  801934:	10800218 	cmpnei	r2,r2,8
  801938:	10000b1e 	bne	r2,zero,801968 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  80193c:	e0bffc17 	ldw	r2,-16(fp)
  801940:	10800843 	ldbu	r2,33(r2)
  801944:	10803fcc 	andi	r2,r2,255
  801948:	10003226 	beq	r2,zero,801a14 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  80194c:	e0bffc17 	ldw	r2,-16(fp)
  801950:	10800843 	ldbu	r2,33(r2)
  801954:	10bfffc4 	addi	r2,r2,-1
  801958:	1007883a 	mov	r3,r2
  80195c:	e0bffc17 	ldw	r2,-16(fp)
  801960:	10c00845 	stb	r3,33(r2)
  801964:	00002b06 	br	801a14 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  801968:	00802034 	movhi	r2,128
  80196c:	10974004 	addi	r2,r2,23808
  801970:	10c00017 	ldw	r3,0(r2)
  801974:	e0bff907 	ldb	r2,-28(fp)
  801978:	10800044 	addi	r2,r2,1
  80197c:	1885883a 	add	r2,r3,r2
  801980:	10800003 	ldbu	r2,0(r2)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	1080201c 	xori	r2,r2,128
  80198c:	10bfe004 	addi	r2,r2,-128
  801990:	108025cc 	andi	r2,r2,151
  801994:	10001f26 	beq	r2,zero,801a14 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  801998:	e0bffc17 	ldw	r2,-16(fp)
  80199c:	10800883 	ldbu	r2,34(r2)
  8019a0:	10803fcc 	andi	r2,r2,255
  8019a4:	108000b0 	cmpltui	r2,r2,2
  8019a8:	1000021e 	bne	r2,zero,8019b4 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  8019ac:	e13ffc17 	ldw	r4,-16(fp)
  8019b0:	08014000 	call	801400 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8019b4:	e0bffc17 	ldw	r2,-16(fp)
  8019b8:	10800843 	ldbu	r2,33(r2)
  8019bc:	10803fcc 	andi	r2,r2,255
  8019c0:	10801428 	cmpgeui	r2,r2,80
  8019c4:	10000d1e 	bne	r2,zero,8019fc <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  8019c8:	e0bffc17 	ldw	r2,-16(fp)
  8019cc:	10800883 	ldbu	r2,34(r2)
  8019d0:	10c03fcc 	andi	r3,r2,255
  8019d4:	e0bffc17 	ldw	r2,-16(fp)
  8019d8:	10800843 	ldbu	r2,33(r2)
  8019dc:	10803fcc 	andi	r2,r2,255
  8019e0:	e13ffc17 	ldw	r4,-16(fp)
  8019e4:	18c018e4 	muli	r3,r3,99
  8019e8:	20c7883a 	add	r3,r4,r3
  8019ec:	1885883a 	add	r2,r3,r2
  8019f0:	10801004 	addi	r2,r2,64
  8019f4:	e0fff903 	ldbu	r3,-28(fp)
  8019f8:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8019fc:	e0bffc17 	ldw	r2,-16(fp)
  801a00:	10800843 	ldbu	r2,33(r2)
  801a04:	10800044 	addi	r2,r2,1
  801a08:	1007883a 	mov	r3,r2
  801a0c:	e0bffc17 	ldw	r2,-16(fp)
  801a10:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  801a14:	e0bffd17 	ldw	r2,-12(fp)
  801a18:	10800044 	addi	r2,r2,1
  801a1c:	e0bffd15 	stw	r2,-12(fp)
  801a20:	e0fffd17 	ldw	r3,-12(fp)
  801a24:	e0bff817 	ldw	r2,-32(fp)
  801a28:	18bf5f36 	bltu	r3,r2,8017a8 <__alt_data_end+0xff8017a8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  801a2c:	00800404 	movi	r2,16
  801a30:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801a34:	e03ff515 	stw	zero,-44(fp)
  801a38:	00003606 	br	801b14 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801a3c:	00801404 	movi	r2,80
  801a40:	e0bff715 	stw	r2,-36(fp)
  801a44:	00001206 	br	801a90 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  801a48:	e0bff717 	ldw	r2,-36(fp)
  801a4c:	10bfffc4 	addi	r2,r2,-1
  801a50:	e13ffc17 	ldw	r4,-16(fp)
  801a54:	e0fff517 	ldw	r3,-44(fp)
  801a58:	18c018e4 	muli	r3,r3,99
  801a5c:	20c7883a 	add	r3,r4,r3
  801a60:	1885883a 	add	r2,r3,r2
  801a64:	10801004 	addi	r2,r2,64
  801a68:	10800003 	ldbu	r2,0(r2)
  801a6c:	10803fcc 	andi	r2,r2,255
  801a70:	1080201c 	xori	r2,r2,128
  801a74:	10bfe004 	addi	r2,r2,-128
  801a78:	10800820 	cmpeqi	r2,r2,32
  801a7c:	1000011e 	bne	r2,zero,801a84 <altera_avalon_lcd_16207_write+0x31c>
        break;
  801a80:	00000506 	br	801a98 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801a84:	e0bff717 	ldw	r2,-36(fp)
  801a88:	10bfffc4 	addi	r2,r2,-1
  801a8c:	e0bff715 	stw	r2,-36(fp)
  801a90:	e0bff717 	ldw	r2,-36(fp)
  801a94:	00bfec16 	blt	zero,r2,801a48 <__alt_data_end+0xff801a48>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  801a98:	e0bff717 	ldw	r2,-36(fp)
  801a9c:	10800448 	cmpgei	r2,r2,17
  801aa0:	1000031e 	bne	r2,zero,801ab0 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  801aa4:	00800404 	movi	r2,16
  801aa8:	e0bff715 	stw	r2,-36(fp)
  801aac:	00000306 	br	801abc <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  801ab0:	e0bff717 	ldw	r2,-36(fp)
  801ab4:	10800044 	addi	r2,r2,1
  801ab8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  801abc:	e0bff717 	ldw	r2,-36(fp)
  801ac0:	1009883a 	mov	r4,r2
  801ac4:	e0fffc17 	ldw	r3,-16(fp)
  801ac8:	e0bff517 	ldw	r2,-44(fp)
  801acc:	108018e4 	muli	r2,r2,99
  801ad0:	10802404 	addi	r2,r2,144
  801ad4:	1885883a 	add	r2,r3,r2
  801ad8:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  801adc:	e0fff617 	ldw	r3,-40(fp)
  801ae0:	e0bff717 	ldw	r2,-36(fp)
  801ae4:	1880020e 	bge	r3,r2,801af0 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  801ae8:	e0bff717 	ldw	r2,-36(fp)
  801aec:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  801af0:	e0fffc17 	ldw	r3,-16(fp)
  801af4:	e0bff517 	ldw	r2,-44(fp)
  801af8:	108018e4 	muli	r2,r2,99
  801afc:	10802404 	addi	r2,r2,144
  801b00:	1885883a 	add	r2,r3,r2
  801b04:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b08:	e0bff517 	ldw	r2,-44(fp)
  801b0c:	10800044 	addi	r2,r2,1
  801b10:	e0bff515 	stw	r2,-44(fp)
  801b14:	e0bff517 	ldw	r2,-44(fp)
  801b18:	10800090 	cmplti	r2,r2,2
  801b1c:	103fc71e 	bne	r2,zero,801a3c <__alt_data_end+0xff801a3c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  801b20:	e0bff617 	ldw	r2,-40(fp)
  801b24:	10800448 	cmpgei	r2,r2,17
  801b28:	1000031e 	bne	r2,zero,801b38 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  801b2c:	e0bffc17 	ldw	r2,-16(fp)
  801b30:	10000985 	stb	zero,38(r2)
  801b34:	00002e06 	br	801bf0 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  801b38:	e0bff617 	ldw	r2,-40(fp)
  801b3c:	1085883a 	add	r2,r2,r2
  801b40:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  801b44:	e0bff617 	ldw	r2,-40(fp)
  801b48:	1007883a 	mov	r3,r2
  801b4c:	e0bffc17 	ldw	r2,-16(fp)
  801b50:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b54:	e03ff515 	stw	zero,-44(fp)
  801b58:	00002206 	br	801be4 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  801b5c:	e0fffc17 	ldw	r3,-16(fp)
  801b60:	e0bff517 	ldw	r2,-44(fp)
  801b64:	108018e4 	muli	r2,r2,99
  801b68:	10802404 	addi	r2,r2,144
  801b6c:	1885883a 	add	r2,r3,r2
  801b70:	10800043 	ldbu	r2,1(r2)
  801b74:	10803fcc 	andi	r2,r2,255
  801b78:	1080201c 	xori	r2,r2,128
  801b7c:	10bfe004 	addi	r2,r2,-128
  801b80:	10800450 	cmplti	r2,r2,17
  801b84:	1000141e 	bne	r2,zero,801bd8 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801b88:	e0fffc17 	ldw	r3,-16(fp)
  801b8c:	e0bff517 	ldw	r2,-44(fp)
  801b90:	108018e4 	muli	r2,r2,99
  801b94:	10802404 	addi	r2,r2,144
  801b98:	1885883a 	add	r2,r3,r2
  801b9c:	10800043 	ldbu	r2,1(r2)
  801ba0:	10803fcc 	andi	r2,r2,255
  801ba4:	1080201c 	xori	r2,r2,128
  801ba8:	10bfe004 	addi	r2,r2,-128
  801bac:	1004923a 	slli	r2,r2,8
  801bb0:	1009883a 	mov	r4,r2
  801bb4:	e17ff617 	ldw	r5,-40(fp)
  801bb8:	08040740 	call	804074 <__divsi3>
  801bbc:	1009883a 	mov	r4,r2
  801bc0:	e0fffc17 	ldw	r3,-16(fp)
  801bc4:	e0bff517 	ldw	r2,-44(fp)
  801bc8:	108018e4 	muli	r2,r2,99
  801bcc:	10802404 	addi	r2,r2,144
  801bd0:	1885883a 	add	r2,r3,r2
  801bd4:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801bd8:	e0bff517 	ldw	r2,-44(fp)
  801bdc:	10800044 	addi	r2,r2,1
  801be0:	e0bff515 	stw	r2,-44(fp)
  801be4:	e0bff517 	ldw	r2,-44(fp)
  801be8:	10800090 	cmplti	r2,r2,2
  801bec:	103fdb1e 	bne	r2,zero,801b5c <__alt_data_end+0xff801b5c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  801bf0:	e0bffc17 	ldw	r2,-16(fp)
  801bf4:	10800943 	ldbu	r2,37(r2)
  801bf8:	10803fcc 	andi	r2,r2,255
  801bfc:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  801c00:	e13ffc17 	ldw	r4,-16(fp)
  801c04:	08012180 	call	801218 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801c08:	e0bffc17 	ldw	r2,-16(fp)
  801c0c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  801c10:	e0bffc17 	ldw	r2,-16(fp)
  801c14:	10800943 	ldbu	r2,37(r2)
  801c18:	10c03fcc 	andi	r3,r2,255
  801c1c:	e0bffb17 	ldw	r2,-20(fp)
  801c20:	1880011e 	bne	r3,r2,801c28 <altera_avalon_lcd_16207_write+0x4c0>
      break;
  801c24:	00000406 	br	801c38 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  801c28:	e0bffc17 	ldw	r2,-16(fp)
  801c2c:	00c00044 	movi	r3,1
  801c30:	10c009c5 	stb	r3,39(r2)
  }
  801c34:	003fee06 	br	801bf0 <__alt_data_end+0xff801bf0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  801c38:	e0bffe17 	ldw	r2,-8(fp)
}
  801c3c:	e037883a 	mov	sp,fp
  801c40:	dfc00117 	ldw	ra,4(sp)
  801c44:	df000017 	ldw	fp,0(sp)
  801c48:	dec00204 	addi	sp,sp,8
  801c4c:	f800283a 	ret

00801c50 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  801c50:	defffc04 	addi	sp,sp,-16
  801c54:	dfc00315 	stw	ra,12(sp)
  801c58:	df000215 	stw	fp,8(sp)
  801c5c:	df000204 	addi	fp,sp,8
  801c60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  801c64:	e0bfff17 	ldw	r2,-4(fp)
  801c68:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  801c6c:	e0bffe17 	ldw	r2,-8(fp)
  801c70:	10800943 	ldbu	r2,37(r2)
  801c74:	10803fcc 	andi	r2,r2,255
  801c78:	10c00044 	addi	r3,r2,1
  801c7c:	e0bffe17 	ldw	r2,-8(fp)
  801c80:	10800983 	ldbu	r2,38(r2)
  801c84:	10803fcc 	andi	r2,r2,255
  801c88:	18800316 	blt	r3,r2,801c98 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  801c8c:	e0bffe17 	ldw	r2,-8(fp)
  801c90:	10000945 	stb	zero,37(r2)
  801c94:	00000606 	br	801cb0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  801c98:	e0bffe17 	ldw	r2,-8(fp)
  801c9c:	10800943 	ldbu	r2,37(r2)
  801ca0:	10800044 	addi	r2,r2,1
  801ca4:	1007883a 	mov	r3,r2
  801ca8:	e0bffe17 	ldw	r2,-8(fp)
  801cac:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  801cb0:	e0bffe17 	ldw	r2,-8(fp)
  801cb4:	10800983 	ldbu	r2,38(r2)
  801cb8:	10803fcc 	andi	r2,r2,255
  801cbc:	10000826 	beq	r2,zero,801ce0 <alt_lcd_16207_timeout+0x90>
  801cc0:	e0bffe17 	ldw	r2,-8(fp)
  801cc4:	108009c3 	ldbu	r2,39(r2)
  801cc8:	10803fcc 	andi	r2,r2,255
  801ccc:	1080201c 	xori	r2,r2,128
  801cd0:	10bfe004 	addi	r2,r2,-128
  801cd4:	1000021e 	bne	r2,zero,801ce0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  801cd8:	e13ffe17 	ldw	r4,-8(fp)
  801cdc:	08012180 	call	801218 <lcd_repaint_screen>

  return sp->period;
  801ce0:	e0bffe17 	ldw	r2,-8(fp)
  801ce4:	10800717 	ldw	r2,28(r2)
}
  801ce8:	e037883a 	mov	sp,fp
  801cec:	dfc00117 	ldw	ra,4(sp)
  801cf0:	df000017 	ldw	fp,0(sp)
  801cf4:	dec00204 	addi	sp,sp,8
  801cf8:	f800283a 	ret

00801cfc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  801cfc:	defffc04 	addi	sp,sp,-16
  801d00:	dfc00315 	stw	ra,12(sp)
  801d04:	df000215 	stw	fp,8(sp)
  801d08:	df000204 	addi	fp,sp,8
  801d0c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  801d10:	e0bfff17 	ldw	r2,-4(fp)
  801d14:	10800017 	ldw	r2,0(r2)
  801d18:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  801d1c:	e0bfff17 	ldw	r2,-4(fp)
  801d20:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  801d24:	010ea604 	movi	r4,15000
  801d28:	080347c0 	call	80347c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d2c:	e0bffe17 	ldw	r2,-8(fp)
  801d30:	00c00c04 	movi	r3,48
  801d34:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  801d38:	01040104 	movi	r4,4100
  801d3c:	080347c0 	call	80347c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d40:	e0bffe17 	ldw	r2,-8(fp)
  801d44:	00c00c04 	movi	r3,48
  801d48:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  801d4c:	0100fa04 	movi	r4,1000
  801d50:	080347c0 	call	80347c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d54:	e0bffe17 	ldw	r2,-8(fp)
  801d58:	00c00c04 	movi	r3,48
  801d5c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  801d60:	e13fff17 	ldw	r4,-4(fp)
  801d64:	01400e04 	movi	r5,56
  801d68:	0800fc40 	call	800fc4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  801d6c:	e13fff17 	ldw	r4,-4(fp)
  801d70:	01400204 	movi	r5,8
  801d74:	0800fc40 	call	800fc4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  801d78:	e13fff17 	ldw	r4,-4(fp)
  801d7c:	080114c0 	call	80114c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  801d80:	e13fff17 	ldw	r4,-4(fp)
  801d84:	01400184 	movi	r5,6
  801d88:	0800fc40 	call	800fc4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  801d8c:	e13fff17 	ldw	r4,-4(fp)
  801d90:	01400304 	movi	r5,12
  801d94:	0800fc40 	call	800fc4 <lcd_write_command>

  sp->esccount = -1;
  801d98:	e0bfff17 	ldw	r2,-4(fp)
  801d9c:	00ffffc4 	movi	r3,-1
  801da0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  801da4:	e0bfff17 	ldw	r2,-4(fp)
  801da8:	10800a04 	addi	r2,r2,40
  801dac:	1009883a 	mov	r4,r2
  801db0:	000b883a 	mov	r5,zero
  801db4:	01800204 	movi	r6,8
  801db8:	0803ba40 	call	803ba4 <memset>

  sp->scrollpos = 0;
  801dbc:	e0bfff17 	ldw	r2,-4(fp)
  801dc0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  801dc4:	e0bfff17 	ldw	r2,-4(fp)
  801dc8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  801dcc:	e0bfff17 	ldw	r2,-4(fp)
  801dd0:	100009c5 	stb	zero,39(r2)
  801dd4:	00802034 	movhi	r2,128
  801dd8:	109d7004 	addi	r2,r2,30144
  801ddc:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  801de0:	1009883a 	mov	r4,r2
  801de4:	01400284 	movi	r5,10
  801de8:	08041240 	call	804124 <__udivsi3>
  801dec:	1007883a 	mov	r3,r2
  801df0:	e0bfff17 	ldw	r2,-4(fp)
  801df4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  801df8:	e0bfff17 	ldw	r2,-4(fp)
  801dfc:	10c00104 	addi	r3,r2,4
  801e00:	e0bfff17 	ldw	r2,-4(fp)
  801e04:	10800717 	ldw	r2,28(r2)
  801e08:	1809883a 	mov	r4,r3
  801e0c:	100b883a 	mov	r5,r2
  801e10:	01802034 	movhi	r6,128
  801e14:	31871404 	addi	r6,r6,7248
  801e18:	e1ffff17 	ldw	r7,-4(fp)
  801e1c:	08028780 	call	802878 <alt_alarm_start>
}
  801e20:	e037883a 	mov	sp,fp
  801e24:	dfc00117 	ldw	ra,4(sp)
  801e28:	df000017 	ldw	fp,0(sp)
  801e2c:	dec00204 	addi	sp,sp,8
  801e30:	f800283a 	ret

00801e34 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801e34:	defffa04 	addi	sp,sp,-24
  801e38:	dfc00515 	stw	ra,20(sp)
  801e3c:	df000415 	stw	fp,16(sp)
  801e40:	df000404 	addi	fp,sp,16
  801e44:	e13ffd15 	stw	r4,-12(fp)
  801e48:	e17ffe15 	stw	r5,-8(fp)
  801e4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  801e50:	e0bffd17 	ldw	r2,-12(fp)
  801e54:	10800017 	ldw	r2,0(r2)
  801e58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  801e5c:	e0bffc17 	ldw	r2,-16(fp)
  801e60:	10c00a04 	addi	r3,r2,40
  801e64:	e0bffd17 	ldw	r2,-12(fp)
  801e68:	10800217 	ldw	r2,8(r2)
  801e6c:	1809883a 	mov	r4,r3
  801e70:	e17ffe17 	ldw	r5,-8(fp)
  801e74:	e1bfff17 	ldw	r6,-4(fp)
  801e78:	100f883a 	mov	r7,r2
  801e7c:	08017680 	call	801768 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  801e80:	e037883a 	mov	sp,fp
  801e84:	dfc00117 	ldw	ra,4(sp)
  801e88:	df000017 	ldw	fp,0(sp)
  801e8c:	dec00204 	addi	sp,sp,8
  801e90:	f800283a 	ret

00801e94 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  801e94:	defff904 	addi	sp,sp,-28
  801e98:	dfc00615 	stw	ra,24(sp)
  801e9c:	df000515 	stw	fp,20(sp)
  801ea0:	df000504 	addi	fp,sp,20
  801ea4:	e13ffe15 	stw	r4,-8(fp)
  801ea8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  801eac:	0007883a 	mov	r3,zero
  801eb0:	e0bffe17 	ldw	r2,-8(fp)
  801eb4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  801eb8:	e0bffe17 	ldw	r2,-8(fp)
  801ebc:	10800104 	addi	r2,r2,4
  801ec0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801ec4:	0005303a 	rdctl	r2,status
  801ec8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801ecc:	e0fffc17 	ldw	r3,-16(fp)
  801ed0:	00bfff84 	movi	r2,-2
  801ed4:	1884703a 	and	r2,r3,r2
  801ed8:	1001703a 	wrctl	status,r2
  
  return context;
  801edc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  801ee0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  801ee4:	08033780 	call	803378 <alt_tick>
  801ee8:	e0bffb17 	ldw	r2,-20(fp)
  801eec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801ef0:	e0bffd17 	ldw	r2,-12(fp)
  801ef4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  801ef8:	e037883a 	mov	sp,fp
  801efc:	dfc00117 	ldw	ra,4(sp)
  801f00:	df000017 	ldw	fp,0(sp)
  801f04:	dec00204 	addi	sp,sp,8
  801f08:	f800283a 	ret

00801f0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  801f0c:	defff904 	addi	sp,sp,-28
  801f10:	dfc00615 	stw	ra,24(sp)
  801f14:	df000515 	stw	fp,20(sp)
  801f18:	df000504 	addi	fp,sp,20
  801f1c:	e13ffc15 	stw	r4,-16(fp)
  801f20:	e17ffd15 	stw	r5,-12(fp)
  801f24:	e1bffe15 	stw	r6,-8(fp)
  801f28:	e1ffff15 	stw	r7,-4(fp)
  801f2c:	e0bfff17 	ldw	r2,-4(fp)
  801f30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  801f34:	00802034 	movhi	r2,128
  801f38:	109d7004 	addi	r2,r2,30144
  801f3c:	10800017 	ldw	r2,0(r2)
  801f40:	1000041e 	bne	r2,zero,801f54 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  801f44:	00802034 	movhi	r2,128
  801f48:	109d7004 	addi	r2,r2,30144
  801f4c:	e0fffb17 	ldw	r3,-20(fp)
  801f50:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  801f54:	e0bffc17 	ldw	r2,-16(fp)
  801f58:	10800104 	addi	r2,r2,4
  801f5c:	00c001c4 	movi	r3,7
  801f60:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  801f64:	e13ffe17 	ldw	r4,-8(fp)
  801f68:	e17ffc17 	ldw	r5,-16(fp)
  801f6c:	01802034 	movhi	r6,128
  801f70:	3187a504 	addi	r6,r6,7828
  801f74:	0802e5c0 	call	802e5c <alt_irq_register>
#endif  
}
  801f78:	e037883a 	mov	sp,fp
  801f7c:	dfc00117 	ldw	ra,4(sp)
  801f80:	df000017 	ldw	fp,0(sp)
  801f84:	dec00204 	addi	sp,sp,8
  801f88:	f800283a 	ret

00801f8c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  801f8c:	defffa04 	addi	sp,sp,-24
  801f90:	dfc00515 	stw	ra,20(sp)
  801f94:	df000415 	stw	fp,16(sp)
  801f98:	df000404 	addi	fp,sp,16
  801f9c:	e13ffd15 	stw	r4,-12(fp)
  801fa0:	e17ffe15 	stw	r5,-8(fp)
  801fa4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  801fa8:	e0bffd17 	ldw	r2,-12(fp)
  801fac:	10800017 	ldw	r2,0(r2)
  801fb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  801fb4:	e0bffc17 	ldw	r2,-16(fp)
  801fb8:	10c00a04 	addi	r3,r2,40
  801fbc:	e0bffd17 	ldw	r2,-12(fp)
  801fc0:	10800217 	ldw	r2,8(r2)
  801fc4:	1809883a 	mov	r4,r3
  801fc8:	e17ffe17 	ldw	r5,-8(fp)
  801fcc:	e1bfff17 	ldw	r6,-4(fp)
  801fd0:	100f883a 	mov	r7,r2
  801fd4:	08024a00 	call	8024a0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  801fd8:	e037883a 	mov	sp,fp
  801fdc:	dfc00117 	ldw	ra,4(sp)
  801fe0:	df000017 	ldw	fp,0(sp)
  801fe4:	dec00204 	addi	sp,sp,8
  801fe8:	f800283a 	ret

00801fec <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801fec:	defffa04 	addi	sp,sp,-24
  801ff0:	dfc00515 	stw	ra,20(sp)
  801ff4:	df000415 	stw	fp,16(sp)
  801ff8:	df000404 	addi	fp,sp,16
  801ffc:	e13ffd15 	stw	r4,-12(fp)
  802000:	e17ffe15 	stw	r5,-8(fp)
  802004:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802008:	e0bffd17 	ldw	r2,-12(fp)
  80200c:	10800017 	ldw	r2,0(r2)
  802010:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  802014:	e0bffc17 	ldw	r2,-16(fp)
  802018:	10c00a04 	addi	r3,r2,40
  80201c:	e0bffd17 	ldw	r2,-12(fp)
  802020:	10800217 	ldw	r2,8(r2)
  802024:	1809883a 	mov	r4,r3
  802028:	e17ffe17 	ldw	r5,-8(fp)
  80202c:	e1bfff17 	ldw	r6,-4(fp)
  802030:	100f883a 	mov	r7,r2
  802034:	08026cc0 	call	8026cc <altera_avalon_uart_write>
      fd->fd_flags);
}
  802038:	e037883a 	mov	sp,fp
  80203c:	dfc00117 	ldw	ra,4(sp)
  802040:	df000017 	ldw	fp,0(sp)
  802044:	dec00204 	addi	sp,sp,8
  802048:	f800283a 	ret

0080204c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80204c:	defffc04 	addi	sp,sp,-16
  802050:	dfc00315 	stw	ra,12(sp)
  802054:	df000215 	stw	fp,8(sp)
  802058:	df000204 	addi	fp,sp,8
  80205c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802060:	e0bfff17 	ldw	r2,-4(fp)
  802064:	10800017 	ldw	r2,0(r2)
  802068:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80206c:	e0bffe17 	ldw	r2,-8(fp)
  802070:	10c00a04 	addi	r3,r2,40
  802074:	e0bfff17 	ldw	r2,-4(fp)
  802078:	10800217 	ldw	r2,8(r2)
  80207c:	1809883a 	mov	r4,r3
  802080:	100b883a 	mov	r5,r2
  802084:	08023fc0 	call	8023fc <altera_avalon_uart_close>
}
  802088:	e037883a 	mov	sp,fp
  80208c:	dfc00117 	ldw	ra,4(sp)
  802090:	df000017 	ldw	fp,0(sp)
  802094:	dec00204 	addi	sp,sp,8
  802098:	f800283a 	ret

0080209c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80209c:	defff904 	addi	sp,sp,-28
  8020a0:	dfc00615 	stw	ra,24(sp)
  8020a4:	df000515 	stw	fp,20(sp)
  8020a8:	df000504 	addi	fp,sp,20
  8020ac:	e13ffd15 	stw	r4,-12(fp)
  8020b0:	e17ffe15 	stw	r5,-8(fp)
  8020b4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8020b8:	e0bffd17 	ldw	r2,-12(fp)
  8020bc:	10800017 	ldw	r2,0(r2)
  8020c0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8020c4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8020c8:	1000041e 	bne	r2,zero,8020dc <altera_avalon_uart_init+0x40>
  8020cc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8020d0:	1000021e 	bne	r2,zero,8020dc <altera_avalon_uart_init+0x40>
  8020d4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8020d8:	10000226 	beq	r2,zero,8020e4 <altera_avalon_uart_init+0x48>
  8020dc:	00800044 	movi	r2,1
  8020e0:	00000106 	br	8020e8 <altera_avalon_uart_init+0x4c>
  8020e4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8020e8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8020ec:	e0bffc17 	ldw	r2,-16(fp)
  8020f0:	10000d1e 	bne	r2,zero,802128 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8020f4:	e0bffd17 	ldw	r2,-12(fp)
  8020f8:	00c32004 	movi	r3,3200
  8020fc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  802100:	e0bffb17 	ldw	r2,-20(fp)
  802104:	10800304 	addi	r2,r2,12
  802108:	e0fffd17 	ldw	r3,-12(fp)
  80210c:	18c00117 	ldw	r3,4(r3)
  802110:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  802114:	e13fff17 	ldw	r4,-4(fp)
  802118:	e17ffd17 	ldw	r5,-12(fp)
  80211c:	01802034 	movhi	r6,128
  802120:	31884f04 	addi	r6,r6,8508
  802124:	0802e5c0 	call	802e5c <alt_irq_register>
#endif  
  }
}
  802128:	e037883a 	mov	sp,fp
  80212c:	dfc00117 	ldw	ra,4(sp)
  802130:	df000017 	ldw	fp,0(sp)
  802134:	dec00204 	addi	sp,sp,8
  802138:	f800283a 	ret

0080213c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80213c:	defff904 	addi	sp,sp,-28
  802140:	dfc00615 	stw	ra,24(sp)
  802144:	df000515 	stw	fp,20(sp)
  802148:	df000504 	addi	fp,sp,20
  80214c:	e13ffe15 	stw	r4,-8(fp)
  802150:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  802154:	e0bffe17 	ldw	r2,-8(fp)
  802158:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  80215c:	e0bffb17 	ldw	r2,-20(fp)
  802160:	10800017 	ldw	r2,0(r2)
  802164:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  802168:	e0bffc17 	ldw	r2,-16(fp)
  80216c:	10800204 	addi	r2,r2,8
  802170:	10800037 	ldwio	r2,0(r2)
  802174:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  802178:	e0bffc17 	ldw	r2,-16(fp)
  80217c:	10800204 	addi	r2,r2,8
  802180:	0007883a 	mov	r3,zero
  802184:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  802188:	e0bffc17 	ldw	r2,-16(fp)
  80218c:	10800204 	addi	r2,r2,8
  802190:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  802194:	e0bffd17 	ldw	r2,-12(fp)
  802198:	1080200c 	andi	r2,r2,128
  80219c:	10000326 	beq	r2,zero,8021ac <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  8021a0:	e13ffb17 	ldw	r4,-20(fp)
  8021a4:	e17ffd17 	ldw	r5,-12(fp)
  8021a8:	08021d80 	call	8021d8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8021ac:	e0bffd17 	ldw	r2,-12(fp)
  8021b0:	1081100c 	andi	r2,r2,1088
  8021b4:	10000326 	beq	r2,zero,8021c4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8021b8:	e13ffb17 	ldw	r4,-20(fp)
  8021bc:	e17ffd17 	ldw	r5,-12(fp)
  8021c0:	08022b80 	call	8022b8 <altera_avalon_uart_txirq>
  }
  

}
  8021c4:	e037883a 	mov	sp,fp
  8021c8:	dfc00117 	ldw	ra,4(sp)
  8021cc:	df000017 	ldw	fp,0(sp)
  8021d0:	dec00204 	addi	sp,sp,8
  8021d4:	f800283a 	ret

008021d8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8021d8:	defffc04 	addi	sp,sp,-16
  8021dc:	df000315 	stw	fp,12(sp)
  8021e0:	df000304 	addi	fp,sp,12
  8021e4:	e13ffe15 	stw	r4,-8(fp)
  8021e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8021ec:	e0bfff17 	ldw	r2,-4(fp)
  8021f0:	108000cc 	andi	r2,r2,3
  8021f4:	10000126 	beq	r2,zero,8021fc <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8021f8:	00002b06 	br	8022a8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8021fc:	e0bffe17 	ldw	r2,-8(fp)
  802200:	10800317 	ldw	r2,12(r2)
  802204:	e0bffe17 	ldw	r2,-8(fp)
  802208:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80220c:	e0bffe17 	ldw	r2,-8(fp)
  802210:	10800317 	ldw	r2,12(r2)
  802214:	10800044 	addi	r2,r2,1
  802218:	10800fcc 	andi	r2,r2,63
  80221c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  802220:	e0bffe17 	ldw	r2,-8(fp)
  802224:	10800317 	ldw	r2,12(r2)
  802228:	e0fffe17 	ldw	r3,-8(fp)
  80222c:	18c00017 	ldw	r3,0(r3)
  802230:	18c00037 	ldwio	r3,0(r3)
  802234:	1809883a 	mov	r4,r3
  802238:	e0fffe17 	ldw	r3,-8(fp)
  80223c:	1885883a 	add	r2,r3,r2
  802240:	10800704 	addi	r2,r2,28
  802244:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  802248:	e0bffe17 	ldw	r2,-8(fp)
  80224c:	e0fffd17 	ldw	r3,-12(fp)
  802250:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802254:	e0bffe17 	ldw	r2,-8(fp)
  802258:	10800317 	ldw	r2,12(r2)
  80225c:	10800044 	addi	r2,r2,1
  802260:	10800fcc 	andi	r2,r2,63
  802264:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  802268:	e0bffe17 	ldw	r2,-8(fp)
  80226c:	10c00217 	ldw	r3,8(r2)
  802270:	e0bffd17 	ldw	r2,-12(fp)
  802274:	18800c1e 	bne	r3,r2,8022a8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802278:	e0bffe17 	ldw	r2,-8(fp)
  80227c:	10c00117 	ldw	r3,4(r2)
  802280:	00bfdfc4 	movi	r2,-129
  802284:	1886703a 	and	r3,r3,r2
  802288:	e0bffe17 	ldw	r2,-8(fp)
  80228c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  802290:	e0bffe17 	ldw	r2,-8(fp)
  802294:	10800017 	ldw	r2,0(r2)
  802298:	10800304 	addi	r2,r2,12
  80229c:	e0fffe17 	ldw	r3,-8(fp)
  8022a0:	18c00117 	ldw	r3,4(r3)
  8022a4:	10c00035 	stwio	r3,0(r2)
  }   
}
  8022a8:	e037883a 	mov	sp,fp
  8022ac:	df000017 	ldw	fp,0(sp)
  8022b0:	dec00104 	addi	sp,sp,4
  8022b4:	f800283a 	ret

008022b8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8022b8:	defffb04 	addi	sp,sp,-20
  8022bc:	df000415 	stw	fp,16(sp)
  8022c0:	df000404 	addi	fp,sp,16
  8022c4:	e13ffc15 	stw	r4,-16(fp)
  8022c8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8022cc:	e0bffc17 	ldw	r2,-16(fp)
  8022d0:	10c00417 	ldw	r3,16(r2)
  8022d4:	e0bffc17 	ldw	r2,-16(fp)
  8022d8:	10800517 	ldw	r2,20(r2)
  8022dc:	18803226 	beq	r3,r2,8023a8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8022e0:	e0bffc17 	ldw	r2,-16(fp)
  8022e4:	10800617 	ldw	r2,24(r2)
  8022e8:	1080008c 	andi	r2,r2,2
  8022ec:	10000326 	beq	r2,zero,8022fc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8022f0:	e0bffd17 	ldw	r2,-12(fp)
  8022f4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8022f8:	10001d26 	beq	r2,zero,802370 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8022fc:	e0bffc17 	ldw	r2,-16(fp)
  802300:	10800417 	ldw	r2,16(r2)
  802304:	e0bffc17 	ldw	r2,-16(fp)
  802308:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80230c:	e0bffc17 	ldw	r2,-16(fp)
  802310:	10800017 	ldw	r2,0(r2)
  802314:	10800104 	addi	r2,r2,4
  802318:	e0fffc17 	ldw	r3,-16(fp)
  80231c:	18c00417 	ldw	r3,16(r3)
  802320:	e13ffc17 	ldw	r4,-16(fp)
  802324:	20c7883a 	add	r3,r4,r3
  802328:	18c01704 	addi	r3,r3,92
  80232c:	18c00003 	ldbu	r3,0(r3)
  802330:	18c03fcc 	andi	r3,r3,255
  802334:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  802338:	e0bffc17 	ldw	r2,-16(fp)
  80233c:	10800417 	ldw	r2,16(r2)
  802340:	10800044 	addi	r2,r2,1
  802344:	e0fffc17 	ldw	r3,-16(fp)
  802348:	18800415 	stw	r2,16(r3)
  80234c:	10c00fcc 	andi	r3,r2,63
  802350:	e0bffc17 	ldw	r2,-16(fp)
  802354:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802358:	e0bffc17 	ldw	r2,-16(fp)
  80235c:	10800117 	ldw	r2,4(r2)
  802360:	10c01014 	ori	r3,r2,64
  802364:	e0bffc17 	ldw	r2,-16(fp)
  802368:	10c00115 	stw	r3,4(r2)
  80236c:	00000e06 	br	8023a8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  802370:	e0bffc17 	ldw	r2,-16(fp)
  802374:	10800017 	ldw	r2,0(r2)
  802378:	10800204 	addi	r2,r2,8
  80237c:	10800037 	ldwio	r2,0(r2)
  802380:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802384:	e0bffd17 	ldw	r2,-12(fp)
  802388:	1082000c 	andi	r2,r2,2048
  80238c:	1000061e 	bne	r2,zero,8023a8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802390:	e0bffc17 	ldw	r2,-16(fp)
  802394:	10c00117 	ldw	r3,4(r2)
  802398:	00bfefc4 	movi	r2,-65
  80239c:	1886703a 	and	r3,r3,r2
  8023a0:	e0bffc17 	ldw	r2,-16(fp)
  8023a4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8023a8:	e0bffc17 	ldw	r2,-16(fp)
  8023ac:	10c00417 	ldw	r3,16(r2)
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10800517 	ldw	r2,20(r2)
  8023b8:	1880061e 	bne	r3,r2,8023d4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8023bc:	e0bffc17 	ldw	r2,-16(fp)
  8023c0:	10c00117 	ldw	r3,4(r2)
  8023c4:	00beefc4 	movi	r2,-1089
  8023c8:	1886703a 	and	r3,r3,r2
  8023cc:	e0bffc17 	ldw	r2,-16(fp)
  8023d0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8023d4:	e0bffc17 	ldw	r2,-16(fp)
  8023d8:	10800017 	ldw	r2,0(r2)
  8023dc:	10800304 	addi	r2,r2,12
  8023e0:	e0fffc17 	ldw	r3,-16(fp)
  8023e4:	18c00117 	ldw	r3,4(r3)
  8023e8:	10c00035 	stwio	r3,0(r2)
}
  8023ec:	e037883a 	mov	sp,fp
  8023f0:	df000017 	ldw	fp,0(sp)
  8023f4:	dec00104 	addi	sp,sp,4
  8023f8:	f800283a 	ret

008023fc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8023fc:	defffd04 	addi	sp,sp,-12
  802400:	df000215 	stw	fp,8(sp)
  802404:	df000204 	addi	fp,sp,8
  802408:	e13ffe15 	stw	r4,-8(fp)
  80240c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802410:	00000506 	br	802428 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  802414:	e0bfff17 	ldw	r2,-4(fp)
  802418:	1090000c 	andi	r2,r2,16384
  80241c:	10000226 	beq	r2,zero,802428 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  802420:	00bffd44 	movi	r2,-11
  802424:	00000606 	br	802440 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802428:	e0bffe17 	ldw	r2,-8(fp)
  80242c:	10c00417 	ldw	r3,16(r2)
  802430:	e0bffe17 	ldw	r2,-8(fp)
  802434:	10800517 	ldw	r2,20(r2)
  802438:	18bff61e 	bne	r3,r2,802414 <__alt_data_end+0xff802414>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80243c:	0005883a 	mov	r2,zero
}
  802440:	e037883a 	mov	sp,fp
  802444:	df000017 	ldw	fp,0(sp)
  802448:	dec00104 	addi	sp,sp,4
  80244c:	f800283a 	ret

00802450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802450:	defffe04 	addi	sp,sp,-8
  802454:	dfc00115 	stw	ra,4(sp)
  802458:	df000015 	stw	fp,0(sp)
  80245c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802460:	00802034 	movhi	r2,128
  802464:	10973c04 	addi	r2,r2,23792
  802468:	10800017 	ldw	r2,0(r2)
  80246c:	10000526 	beq	r2,zero,802484 <alt_get_errno+0x34>
  802470:	00802034 	movhi	r2,128
  802474:	10973c04 	addi	r2,r2,23792
  802478:	10800017 	ldw	r2,0(r2)
  80247c:	103ee83a 	callr	r2
  802480:	00000206 	br	80248c <alt_get_errno+0x3c>
  802484:	00802034 	movhi	r2,128
  802488:	109d7304 	addi	r2,r2,30156
}
  80248c:	e037883a 	mov	sp,fp
  802490:	dfc00117 	ldw	ra,4(sp)
  802494:	df000017 	ldw	fp,0(sp)
  802498:	dec00204 	addi	sp,sp,8
  80249c:	f800283a 	ret

008024a0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8024a0:	defff204 	addi	sp,sp,-56
  8024a4:	dfc00d15 	stw	ra,52(sp)
  8024a8:	df000c15 	stw	fp,48(sp)
  8024ac:	df000c04 	addi	fp,sp,48
  8024b0:	e13ffc15 	stw	r4,-16(fp)
  8024b4:	e17ffd15 	stw	r5,-12(fp)
  8024b8:	e1bffe15 	stw	r6,-8(fp)
  8024bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8024c0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8024c4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8024c8:	e0bfff17 	ldw	r2,-4(fp)
  8024cc:	1090000c 	andi	r2,r2,16384
  8024d0:	1005003a 	cmpeq	r2,r2,zero
  8024d4:	10803fcc 	andi	r2,r2,255
  8024d8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8024dc:	00001306 	br	80252c <altera_avalon_uart_read+0x8c>
    {
      count++;
  8024e0:	e0bff517 	ldw	r2,-44(fp)
  8024e4:	10800044 	addi	r2,r2,1
  8024e8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8024ec:	e0bffd17 	ldw	r2,-12(fp)
  8024f0:	10c00044 	addi	r3,r2,1
  8024f4:	e0fffd15 	stw	r3,-12(fp)
  8024f8:	e0fffc17 	ldw	r3,-16(fp)
  8024fc:	18c00217 	ldw	r3,8(r3)
  802500:	e13ffc17 	ldw	r4,-16(fp)
  802504:	20c7883a 	add	r3,r4,r3
  802508:	18c00704 	addi	r3,r3,28
  80250c:	18c00003 	ldbu	r3,0(r3)
  802510:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  802514:	e0bffc17 	ldw	r2,-16(fp)
  802518:	10800217 	ldw	r2,8(r2)
  80251c:	10800044 	addi	r2,r2,1
  802520:	10c00fcc 	andi	r3,r2,63
  802524:	e0bffc17 	ldw	r2,-16(fp)
  802528:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80252c:	e0fff517 	ldw	r3,-44(fp)
  802530:	e0bffe17 	ldw	r2,-8(fp)
  802534:	1880050e 	bge	r3,r2,80254c <altera_avalon_uart_read+0xac>
  802538:	e0bffc17 	ldw	r2,-16(fp)
  80253c:	10c00217 	ldw	r3,8(r2)
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10800317 	ldw	r2,12(r2)
  802548:	18bfe51e 	bne	r3,r2,8024e0 <__alt_data_end+0xff8024e0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80254c:	e0bff517 	ldw	r2,-44(fp)
  802550:	1000251e 	bne	r2,zero,8025e8 <altera_avalon_uart_read+0x148>
  802554:	e0bffc17 	ldw	r2,-16(fp)
  802558:	10c00217 	ldw	r3,8(r2)
  80255c:	e0bffc17 	ldw	r2,-16(fp)
  802560:	10800317 	ldw	r2,12(r2)
  802564:	1880201e 	bne	r3,r2,8025e8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  802568:	e0bff617 	ldw	r2,-40(fp)
  80256c:	1000071e 	bne	r2,zero,80258c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  802570:	08024500 	call	802450 <alt_get_errno>
  802574:	1007883a 	mov	r3,r2
  802578:	008002c4 	movi	r2,11
  80257c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  802580:	00800044 	movi	r2,1
  802584:	e0bff405 	stb	r2,-48(fp)
        break;
  802588:	00001b06 	br	8025f8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80258c:	0005303a 	rdctl	r2,status
  802590:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802594:	e0fff817 	ldw	r3,-32(fp)
  802598:	00bfff84 	movi	r2,-2
  80259c:	1884703a 	and	r2,r3,r2
  8025a0:	1001703a 	wrctl	status,r2
  
  return context;
  8025a4:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8025a8:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8025ac:	e0bffc17 	ldw	r2,-16(fp)
  8025b0:	10800117 	ldw	r2,4(r2)
  8025b4:	10c02014 	ori	r3,r2,128
  8025b8:	e0bffc17 	ldw	r2,-16(fp)
  8025bc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8025c0:	e0bffc17 	ldw	r2,-16(fp)
  8025c4:	10800017 	ldw	r2,0(r2)
  8025c8:	10800304 	addi	r2,r2,12
  8025cc:	e0fffc17 	ldw	r3,-16(fp)
  8025d0:	18c00117 	ldw	r3,4(r3)
  8025d4:	10c00035 	stwio	r3,0(r2)
  8025d8:	e0bff717 	ldw	r2,-36(fp)
  8025dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8025e0:	e0bff917 	ldw	r2,-28(fp)
  8025e4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8025e8:	e0bff517 	ldw	r2,-44(fp)
  8025ec:	1000021e 	bne	r2,zero,8025f8 <altera_avalon_uart_read+0x158>
  8025f0:	e0bffe17 	ldw	r2,-8(fp)
  8025f4:	103fb91e 	bne	r2,zero,8024dc <__alt_data_end+0xff8024dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8025f8:	0005303a 	rdctl	r2,status
  8025fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802600:	e0fffa17 	ldw	r3,-24(fp)
  802604:	00bfff84 	movi	r2,-2
  802608:	1884703a 	and	r2,r3,r2
  80260c:	1001703a 	wrctl	status,r2
  
  return context;
  802610:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  802614:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802618:	e0bffc17 	ldw	r2,-16(fp)
  80261c:	10800117 	ldw	r2,4(r2)
  802620:	10c02014 	ori	r3,r2,128
  802624:	e0bffc17 	ldw	r2,-16(fp)
  802628:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80262c:	e0bffc17 	ldw	r2,-16(fp)
  802630:	10800017 	ldw	r2,0(r2)
  802634:	10800304 	addi	r2,r2,12
  802638:	e0fffc17 	ldw	r3,-16(fp)
  80263c:	18c00117 	ldw	r3,4(r3)
  802640:	10c00035 	stwio	r3,0(r2)
  802644:	e0bff717 	ldw	r2,-36(fp)
  802648:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80264c:	e0bffb17 	ldw	r2,-20(fp)
  802650:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  802654:	e0bff403 	ldbu	r2,-48(fp)
  802658:	10000226 	beq	r2,zero,802664 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80265c:	00bffd44 	movi	r2,-11
  802660:	00000106 	br	802668 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  802664:	e0bff517 	ldw	r2,-44(fp)
  }
}
  802668:	e037883a 	mov	sp,fp
  80266c:	dfc00117 	ldw	ra,4(sp)
  802670:	df000017 	ldw	fp,0(sp)
  802674:	dec00204 	addi	sp,sp,8
  802678:	f800283a 	ret

0080267c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80267c:	defffe04 	addi	sp,sp,-8
  802680:	dfc00115 	stw	ra,4(sp)
  802684:	df000015 	stw	fp,0(sp)
  802688:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80268c:	00802034 	movhi	r2,128
  802690:	10973c04 	addi	r2,r2,23792
  802694:	10800017 	ldw	r2,0(r2)
  802698:	10000526 	beq	r2,zero,8026b0 <alt_get_errno+0x34>
  80269c:	00802034 	movhi	r2,128
  8026a0:	10973c04 	addi	r2,r2,23792
  8026a4:	10800017 	ldw	r2,0(r2)
  8026a8:	103ee83a 	callr	r2
  8026ac:	00000206 	br	8026b8 <alt_get_errno+0x3c>
  8026b0:	00802034 	movhi	r2,128
  8026b4:	109d7304 	addi	r2,r2,30156
}
  8026b8:	e037883a 	mov	sp,fp
  8026bc:	dfc00117 	ldw	ra,4(sp)
  8026c0:	df000017 	ldw	fp,0(sp)
  8026c4:	dec00204 	addi	sp,sp,8
  8026c8:	f800283a 	ret

008026cc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8026cc:	defff204 	addi	sp,sp,-56
  8026d0:	dfc00d15 	stw	ra,52(sp)
  8026d4:	df000c15 	stw	fp,48(sp)
  8026d8:	df000c04 	addi	fp,sp,48
  8026dc:	e13ffc15 	stw	r4,-16(fp)
  8026e0:	e17ffd15 	stw	r5,-12(fp)
  8026e4:	e1bffe15 	stw	r6,-8(fp)
  8026e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8026ec:	e0bffe17 	ldw	r2,-8(fp)
  8026f0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8026f4:	e0bfff17 	ldw	r2,-4(fp)
  8026f8:	1090000c 	andi	r2,r2,16384
  8026fc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802700:	00003c06 	br	8027f4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802704:	e0bffc17 	ldw	r2,-16(fp)
  802708:	10800517 	ldw	r2,20(r2)
  80270c:	10800044 	addi	r2,r2,1
  802710:	10800fcc 	andi	r2,r2,63
  802714:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  802718:	e0bffc17 	ldw	r2,-16(fp)
  80271c:	10c00417 	ldw	r3,16(r2)
  802720:	e0bff617 	ldw	r2,-40(fp)
  802724:	1880221e 	bne	r3,r2,8027b0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  802728:	e0bff517 	ldw	r2,-44(fp)
  80272c:	10000526 	beq	r2,zero,802744 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  802730:	080267c0 	call	80267c <alt_get_errno>
  802734:	1007883a 	mov	r3,r2
  802738:	008002c4 	movi	r2,11
  80273c:	18800015 	stw	r2,0(r3)
        break;
  802740:	00002e06 	br	8027fc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802744:	0005303a 	rdctl	r2,status
  802748:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80274c:	e0fff817 	ldw	r3,-32(fp)
  802750:	00bfff84 	movi	r2,-2
  802754:	1884703a 	and	r2,r3,r2
  802758:	1001703a 	wrctl	status,r2
  
  return context;
  80275c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  802760:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802764:	e0bffc17 	ldw	r2,-16(fp)
  802768:	10800117 	ldw	r2,4(r2)
  80276c:	10c11014 	ori	r3,r2,1088
  802770:	e0bffc17 	ldw	r2,-16(fp)
  802774:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802778:	e0bffc17 	ldw	r2,-16(fp)
  80277c:	10800017 	ldw	r2,0(r2)
  802780:	10800304 	addi	r2,r2,12
  802784:	e0fffc17 	ldw	r3,-16(fp)
  802788:	18c00117 	ldw	r3,4(r3)
  80278c:	10c00035 	stwio	r3,0(r2)
  802790:	e0bff717 	ldw	r2,-36(fp)
  802794:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802798:	e0bff917 	ldw	r2,-28(fp)
  80279c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8027a0:	e0bffc17 	ldw	r2,-16(fp)
  8027a4:	10c00417 	ldw	r3,16(r2)
  8027a8:	e0bff617 	ldw	r2,-40(fp)
  8027ac:	18bffc26 	beq	r3,r2,8027a0 <__alt_data_end+0xff8027a0>
      }
    }

    count--;
  8027b0:	e0bff417 	ldw	r2,-48(fp)
  8027b4:	10bfffc4 	addi	r2,r2,-1
  8027b8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8027bc:	e0bffc17 	ldw	r2,-16(fp)
  8027c0:	10c00517 	ldw	r3,20(r2)
  8027c4:	e0bffd17 	ldw	r2,-12(fp)
  8027c8:	11000044 	addi	r4,r2,1
  8027cc:	e13ffd15 	stw	r4,-12(fp)
  8027d0:	10800003 	ldbu	r2,0(r2)
  8027d4:	1009883a 	mov	r4,r2
  8027d8:	e0bffc17 	ldw	r2,-16(fp)
  8027dc:	10c5883a 	add	r2,r2,r3
  8027e0:	10801704 	addi	r2,r2,92
  8027e4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8027e8:	e0bffc17 	ldw	r2,-16(fp)
  8027ec:	e0fff617 	ldw	r3,-40(fp)
  8027f0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8027f4:	e0bff417 	ldw	r2,-48(fp)
  8027f8:	103fc21e 	bne	r2,zero,802704 <__alt_data_end+0xff802704>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8027fc:	0005303a 	rdctl	r2,status
  802800:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802804:	e0fffa17 	ldw	r3,-24(fp)
  802808:	00bfff84 	movi	r2,-2
  80280c:	1884703a 	and	r2,r3,r2
  802810:	1001703a 	wrctl	status,r2
  
  return context;
  802814:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  802818:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80281c:	e0bffc17 	ldw	r2,-16(fp)
  802820:	10800117 	ldw	r2,4(r2)
  802824:	10c11014 	ori	r3,r2,1088
  802828:	e0bffc17 	ldw	r2,-16(fp)
  80282c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802830:	e0bffc17 	ldw	r2,-16(fp)
  802834:	10800017 	ldw	r2,0(r2)
  802838:	10800304 	addi	r2,r2,12
  80283c:	e0fffc17 	ldw	r3,-16(fp)
  802840:	18c00117 	ldw	r3,4(r3)
  802844:	10c00035 	stwio	r3,0(r2)
  802848:	e0bff717 	ldw	r2,-36(fp)
  80284c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802850:	e0bffb17 	ldw	r2,-20(fp)
  802854:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  802858:	e0fffe17 	ldw	r3,-8(fp)
  80285c:	e0bff417 	ldw	r2,-48(fp)
  802860:	1885c83a 	sub	r2,r3,r2
}
  802864:	e037883a 	mov	sp,fp
  802868:	dfc00117 	ldw	ra,4(sp)
  80286c:	df000017 	ldw	fp,0(sp)
  802870:	dec00204 	addi	sp,sp,8
  802874:	f800283a 	ret

00802878 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  802878:	defff504 	addi	sp,sp,-44
  80287c:	df000a15 	stw	fp,40(sp)
  802880:	df000a04 	addi	fp,sp,40
  802884:	e13ffc15 	stw	r4,-16(fp)
  802888:	e17ffd15 	stw	r5,-12(fp)
  80288c:	e1bffe15 	stw	r6,-8(fp)
  802890:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  802894:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  802898:	00802034 	movhi	r2,128
  80289c:	109d7004 	addi	r2,r2,30144
  8028a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8028a4:	10003f26 	beq	r2,zero,8029a4 <alt_alarm_start+0x12c>
  {
    if (alarm)
  8028a8:	e0bffc17 	ldw	r2,-16(fp)
  8028ac:	10003b26 	beq	r2,zero,80299c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  8028b0:	e0bffc17 	ldw	r2,-16(fp)
  8028b4:	e0fffe17 	ldw	r3,-8(fp)
  8028b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8028bc:	e0bffc17 	ldw	r2,-16(fp)
  8028c0:	e0ffff17 	ldw	r3,-4(fp)
  8028c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8028c8:	0005303a 	rdctl	r2,status
  8028cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8028d0:	e0fff817 	ldw	r3,-32(fp)
  8028d4:	00bfff84 	movi	r2,-2
  8028d8:	1884703a 	and	r2,r3,r2
  8028dc:	1001703a 	wrctl	status,r2
  
  return context;
  8028e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8028e4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8028e8:	00802034 	movhi	r2,128
  8028ec:	109d7104 	addi	r2,r2,30148
  8028f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8028f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8028f8:	e0fffd17 	ldw	r3,-12(fp)
  8028fc:	e0bff617 	ldw	r2,-40(fp)
  802900:	1885883a 	add	r2,r3,r2
  802904:	10c00044 	addi	r3,r2,1
  802908:	e0bffc17 	ldw	r2,-16(fp)
  80290c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  802910:	e0bffc17 	ldw	r2,-16(fp)
  802914:	10c00217 	ldw	r3,8(r2)
  802918:	e0bff617 	ldw	r2,-40(fp)
  80291c:	1880042e 	bgeu	r3,r2,802930 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  802920:	e0bffc17 	ldw	r2,-16(fp)
  802924:	00c00044 	movi	r3,1
  802928:	10c00405 	stb	r3,16(r2)
  80292c:	00000206 	br	802938 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  802930:	e0bffc17 	ldw	r2,-16(fp)
  802934:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  802938:	e0fffc17 	ldw	r3,-16(fp)
  80293c:	00802034 	movhi	r2,128
  802940:	10973e04 	addi	r2,r2,23800
  802944:	e0bff915 	stw	r2,-28(fp)
  802948:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80294c:	e0bffa17 	ldw	r2,-24(fp)
  802950:	e0fff917 	ldw	r3,-28(fp)
  802954:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802958:	e0bff917 	ldw	r2,-28(fp)
  80295c:	10c00017 	ldw	r3,0(r2)
  802960:	e0bffa17 	ldw	r2,-24(fp)
  802964:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802968:	e0bff917 	ldw	r2,-28(fp)
  80296c:	10800017 	ldw	r2,0(r2)
  802970:	e0fffa17 	ldw	r3,-24(fp)
  802974:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802978:	e0bff917 	ldw	r2,-28(fp)
  80297c:	e0fffa17 	ldw	r3,-24(fp)
  802980:	10c00015 	stw	r3,0(r2)
  802984:	e0bff717 	ldw	r2,-36(fp)
  802988:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80298c:	e0bffb17 	ldw	r2,-20(fp)
  802990:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  802994:	0005883a 	mov	r2,zero
  802998:	00000306 	br	8029a8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  80299c:	00bffa84 	movi	r2,-22
  8029a0:	00000106 	br	8029a8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  8029a4:	00bfde84 	movi	r2,-134
  }
}
  8029a8:	e037883a 	mov	sp,fp
  8029ac:	df000017 	ldw	fp,0(sp)
  8029b0:	dec00104 	addi	sp,sp,4
  8029b4:	f800283a 	ret

008029b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8029b8:	defffe04 	addi	sp,sp,-8
  8029bc:	dfc00115 	stw	ra,4(sp)
  8029c0:	df000015 	stw	fp,0(sp)
  8029c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8029c8:	00802034 	movhi	r2,128
  8029cc:	10973c04 	addi	r2,r2,23792
  8029d0:	10800017 	ldw	r2,0(r2)
  8029d4:	10000526 	beq	r2,zero,8029ec <alt_get_errno+0x34>
  8029d8:	00802034 	movhi	r2,128
  8029dc:	10973c04 	addi	r2,r2,23792
  8029e0:	10800017 	ldw	r2,0(r2)
  8029e4:	103ee83a 	callr	r2
  8029e8:	00000206 	br	8029f4 <alt_get_errno+0x3c>
  8029ec:	00802034 	movhi	r2,128
  8029f0:	109d7304 	addi	r2,r2,30156
}
  8029f4:	e037883a 	mov	sp,fp
  8029f8:	dfc00117 	ldw	ra,4(sp)
  8029fc:	df000017 	ldw	fp,0(sp)
  802a00:	dec00204 	addi	sp,sp,8
  802a04:	f800283a 	ret

00802a08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802a08:	defffb04 	addi	sp,sp,-20
  802a0c:	dfc00415 	stw	ra,16(sp)
  802a10:	df000315 	stw	fp,12(sp)
  802a14:	df000304 	addi	fp,sp,12
  802a18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802a1c:	e0bfff17 	ldw	r2,-4(fp)
  802a20:	10000616 	blt	r2,zero,802a3c <close+0x34>
  802a24:	e0bfff17 	ldw	r2,-4(fp)
  802a28:	10c00324 	muli	r3,r2,12
  802a2c:	00802034 	movhi	r2,128
  802a30:	1095cd04 	addi	r2,r2,22324
  802a34:	1885883a 	add	r2,r3,r2
  802a38:	00000106 	br	802a40 <close+0x38>
  802a3c:	0005883a 	mov	r2,zero
  802a40:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802a44:	e0bffd17 	ldw	r2,-12(fp)
  802a48:	10001926 	beq	r2,zero,802ab0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802a4c:	e0bffd17 	ldw	r2,-12(fp)
  802a50:	10800017 	ldw	r2,0(r2)
  802a54:	10800417 	ldw	r2,16(r2)
  802a58:	10000626 	beq	r2,zero,802a74 <close+0x6c>
  802a5c:	e0bffd17 	ldw	r2,-12(fp)
  802a60:	10800017 	ldw	r2,0(r2)
  802a64:	10800417 	ldw	r2,16(r2)
  802a68:	e13ffd17 	ldw	r4,-12(fp)
  802a6c:	103ee83a 	callr	r2
  802a70:	00000106 	br	802a78 <close+0x70>
  802a74:	0005883a 	mov	r2,zero
  802a78:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802a7c:	e13fff17 	ldw	r4,-4(fp)
  802a80:	08032800 	call	803280 <alt_release_fd>
    if (rval < 0)
  802a84:	e0bffe17 	ldw	r2,-8(fp)
  802a88:	1000070e 	bge	r2,zero,802aa8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  802a8c:	08029b80 	call	8029b8 <alt_get_errno>
  802a90:	1007883a 	mov	r3,r2
  802a94:	e0bffe17 	ldw	r2,-8(fp)
  802a98:	0085c83a 	sub	r2,zero,r2
  802a9c:	18800015 	stw	r2,0(r3)
      return -1;
  802aa0:	00bfffc4 	movi	r2,-1
  802aa4:	00000706 	br	802ac4 <close+0xbc>
    }
    return 0;
  802aa8:	0005883a 	mov	r2,zero
  802aac:	00000506 	br	802ac4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802ab0:	08029b80 	call	8029b8 <alt_get_errno>
  802ab4:	1007883a 	mov	r3,r2
  802ab8:	00801444 	movi	r2,81
  802abc:	18800015 	stw	r2,0(r3)
    return -1;
  802ac0:	00bfffc4 	movi	r2,-1
  }
}
  802ac4:	e037883a 	mov	sp,fp
  802ac8:	dfc00117 	ldw	ra,4(sp)
  802acc:	df000017 	ldw	fp,0(sp)
  802ad0:	dec00204 	addi	sp,sp,8
  802ad4:	f800283a 	ret

00802ad8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802ad8:	defffe04 	addi	sp,sp,-8
  802adc:	df000115 	stw	fp,4(sp)
  802ae0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802ae4:	e03fff15 	stw	zero,-4(fp)
  802ae8:	00000506 	br	802b00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  802aec:	e0bfff17 	ldw	r2,-4(fp)
  802af0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802af4:	e0bfff17 	ldw	r2,-4(fp)
  802af8:	10800804 	addi	r2,r2,32
  802afc:	e0bfff15 	stw	r2,-4(fp)
  802b00:	e0bfff17 	ldw	r2,-4(fp)
  802b04:	10820030 	cmpltui	r2,r2,2048
  802b08:	103ff81e 	bne	r2,zero,802aec <__alt_data_end+0xff802aec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802b0c:	e037883a 	mov	sp,fp
  802b10:	df000017 	ldw	fp,0(sp)
  802b14:	dec00104 	addi	sp,sp,4
  802b18:	f800283a 	ret

00802b1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802b1c:	defffc04 	addi	sp,sp,-16
  802b20:	df000315 	stw	fp,12(sp)
  802b24:	df000304 	addi	fp,sp,12
  802b28:	e13ffd15 	stw	r4,-12(fp)
  802b2c:	e17ffe15 	stw	r5,-8(fp)
  802b30:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802b34:	e0bfff17 	ldw	r2,-4(fp)
}
  802b38:	e037883a 	mov	sp,fp
  802b3c:	df000017 	ldw	fp,0(sp)
  802b40:	dec00104 	addi	sp,sp,4
  802b44:	f800283a 	ret

00802b48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802b48:	defffe04 	addi	sp,sp,-8
  802b4c:	dfc00115 	stw	ra,4(sp)
  802b50:	df000015 	stw	fp,0(sp)
  802b54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802b58:	00802034 	movhi	r2,128
  802b5c:	10973c04 	addi	r2,r2,23792
  802b60:	10800017 	ldw	r2,0(r2)
  802b64:	10000526 	beq	r2,zero,802b7c <alt_get_errno+0x34>
  802b68:	00802034 	movhi	r2,128
  802b6c:	10973c04 	addi	r2,r2,23792
  802b70:	10800017 	ldw	r2,0(r2)
  802b74:	103ee83a 	callr	r2
  802b78:	00000206 	br	802b84 <alt_get_errno+0x3c>
  802b7c:	00802034 	movhi	r2,128
  802b80:	109d7304 	addi	r2,r2,30156
}
  802b84:	e037883a 	mov	sp,fp
  802b88:	dfc00117 	ldw	ra,4(sp)
  802b8c:	df000017 	ldw	fp,0(sp)
  802b90:	dec00204 	addi	sp,sp,8
  802b94:	f800283a 	ret

00802b98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802b98:	defffa04 	addi	sp,sp,-24
  802b9c:	dfc00515 	stw	ra,20(sp)
  802ba0:	df000415 	stw	fp,16(sp)
  802ba4:	df000404 	addi	fp,sp,16
  802ba8:	e13ffe15 	stw	r4,-8(fp)
  802bac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802bb0:	e0bffe17 	ldw	r2,-8(fp)
  802bb4:	10000326 	beq	r2,zero,802bc4 <alt_dev_llist_insert+0x2c>
  802bb8:	e0bffe17 	ldw	r2,-8(fp)
  802bbc:	10800217 	ldw	r2,8(r2)
  802bc0:	1000061e 	bne	r2,zero,802bdc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  802bc4:	0802b480 	call	802b48 <alt_get_errno>
  802bc8:	1007883a 	mov	r3,r2
  802bcc:	00800584 	movi	r2,22
  802bd0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  802bd4:	00bffa84 	movi	r2,-22
  802bd8:	00001306 	br	802c28 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  802bdc:	e0bffe17 	ldw	r2,-8(fp)
  802be0:	e0ffff17 	ldw	r3,-4(fp)
  802be4:	e0fffc15 	stw	r3,-16(fp)
  802be8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802bec:	e0bffd17 	ldw	r2,-12(fp)
  802bf0:	e0fffc17 	ldw	r3,-16(fp)
  802bf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802bf8:	e0bffc17 	ldw	r2,-16(fp)
  802bfc:	10c00017 	ldw	r3,0(r2)
  802c00:	e0bffd17 	ldw	r2,-12(fp)
  802c04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802c08:	e0bffc17 	ldw	r2,-16(fp)
  802c0c:	10800017 	ldw	r2,0(r2)
  802c10:	e0fffd17 	ldw	r3,-12(fp)
  802c14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802c18:	e0bffc17 	ldw	r2,-16(fp)
  802c1c:	e0fffd17 	ldw	r3,-12(fp)
  802c20:	10c00015 	stw	r3,0(r2)

  return 0;  
  802c24:	0005883a 	mov	r2,zero
}
  802c28:	e037883a 	mov	sp,fp
  802c2c:	dfc00117 	ldw	ra,4(sp)
  802c30:	df000017 	ldw	fp,0(sp)
  802c34:	dec00204 	addi	sp,sp,8
  802c38:	f800283a 	ret

00802c3c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  802c3c:	defffd04 	addi	sp,sp,-12
  802c40:	dfc00215 	stw	ra,8(sp)
  802c44:	df000115 	stw	fp,4(sp)
  802c48:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802c4c:	00802034 	movhi	r2,128
  802c50:	10905904 	addi	r2,r2,16740
  802c54:	e0bfff15 	stw	r2,-4(fp)
  802c58:	00000606 	br	802c74 <_do_ctors+0x38>
        (*ctor) (); 
  802c5c:	e0bfff17 	ldw	r2,-4(fp)
  802c60:	10800017 	ldw	r2,0(r2)
  802c64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802c68:	e0bfff17 	ldw	r2,-4(fp)
  802c6c:	10bfff04 	addi	r2,r2,-4
  802c70:	e0bfff15 	stw	r2,-4(fp)
  802c74:	e0ffff17 	ldw	r3,-4(fp)
  802c78:	00802034 	movhi	r2,128
  802c7c:	10905a04 	addi	r2,r2,16744
  802c80:	18bff62e 	bgeu	r3,r2,802c5c <__alt_data_end+0xff802c5c>
        (*ctor) (); 
}
  802c84:	e037883a 	mov	sp,fp
  802c88:	dfc00117 	ldw	ra,4(sp)
  802c8c:	df000017 	ldw	fp,0(sp)
  802c90:	dec00204 	addi	sp,sp,8
  802c94:	f800283a 	ret

00802c98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  802c98:	defffd04 	addi	sp,sp,-12
  802c9c:	dfc00215 	stw	ra,8(sp)
  802ca0:	df000115 	stw	fp,4(sp)
  802ca4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802ca8:	00802034 	movhi	r2,128
  802cac:	10905904 	addi	r2,r2,16740
  802cb0:	e0bfff15 	stw	r2,-4(fp)
  802cb4:	00000606 	br	802cd0 <_do_dtors+0x38>
        (*dtor) (); 
  802cb8:	e0bfff17 	ldw	r2,-4(fp)
  802cbc:	10800017 	ldw	r2,0(r2)
  802cc0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802cc4:	e0bfff17 	ldw	r2,-4(fp)
  802cc8:	10bfff04 	addi	r2,r2,-4
  802ccc:	e0bfff15 	stw	r2,-4(fp)
  802cd0:	e0ffff17 	ldw	r3,-4(fp)
  802cd4:	00802034 	movhi	r2,128
  802cd8:	10905a04 	addi	r2,r2,16744
  802cdc:	18bff62e 	bgeu	r3,r2,802cb8 <__alt_data_end+0xff802cb8>
        (*dtor) (); 
}
  802ce0:	e037883a 	mov	sp,fp
  802ce4:	dfc00117 	ldw	ra,4(sp)
  802ce8:	df000017 	ldw	fp,0(sp)
  802cec:	dec00204 	addi	sp,sp,8
  802cf0:	f800283a 	ret

00802cf4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  802cf4:	defffe04 	addi	sp,sp,-8
  802cf8:	dfc00115 	stw	ra,4(sp)
  802cfc:	df000015 	stw	fp,0(sp)
  802d00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  802d04:	0009883a 	mov	r4,zero
  802d08:	01440004 	movi	r5,4096
  802d0c:	080387c0 	call	80387c <alt_icache_flush>
#endif
}
  802d10:	e037883a 	mov	sp,fp
  802d14:	dfc00117 	ldw	ra,4(sp)
  802d18:	df000017 	ldw	fp,0(sp)
  802d1c:	dec00204 	addi	sp,sp,8
  802d20:	f800283a 	ret

00802d24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  802d24:	defff904 	addi	sp,sp,-28
  802d28:	dfc00615 	stw	ra,24(sp)
  802d2c:	df000515 	stw	fp,20(sp)
  802d30:	df000504 	addi	fp,sp,20
  802d34:	e13ffc15 	stw	r4,-16(fp)
  802d38:	e17ffd15 	stw	r5,-12(fp)
  802d3c:	e1bffe15 	stw	r6,-8(fp)
  802d40:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  802d44:	e13ffd17 	ldw	r4,-12(fp)
  802d48:	e17ffe17 	ldw	r5,-8(fp)
  802d4c:	e1bfff17 	ldw	r6,-4(fp)
  802d50:	08031280 	call	803128 <open>
  802d54:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  802d58:	e0bffb17 	ldw	r2,-20(fp)
  802d5c:	10001c16 	blt	r2,zero,802dd0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  802d60:	00802034 	movhi	r2,128
  802d64:	1095cd04 	addi	r2,r2,22324
  802d68:	e0fffb17 	ldw	r3,-20(fp)
  802d6c:	18c00324 	muli	r3,r3,12
  802d70:	10c5883a 	add	r2,r2,r3
  802d74:	10c00017 	ldw	r3,0(r2)
  802d78:	e0bffc17 	ldw	r2,-16(fp)
  802d7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  802d80:	00802034 	movhi	r2,128
  802d84:	1095cd04 	addi	r2,r2,22324
  802d88:	e0fffb17 	ldw	r3,-20(fp)
  802d8c:	18c00324 	muli	r3,r3,12
  802d90:	18c00104 	addi	r3,r3,4
  802d94:	10c5883a 	add	r2,r2,r3
  802d98:	10c00017 	ldw	r3,0(r2)
  802d9c:	e0bffc17 	ldw	r2,-16(fp)
  802da0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  802da4:	00802034 	movhi	r2,128
  802da8:	1095cd04 	addi	r2,r2,22324
  802dac:	e0fffb17 	ldw	r3,-20(fp)
  802db0:	18c00324 	muli	r3,r3,12
  802db4:	18c00204 	addi	r3,r3,8
  802db8:	10c5883a 	add	r2,r2,r3
  802dbc:	10c00017 	ldw	r3,0(r2)
  802dc0:	e0bffc17 	ldw	r2,-16(fp)
  802dc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  802dc8:	e13ffb17 	ldw	r4,-20(fp)
  802dcc:	08032800 	call	803280 <alt_release_fd>
  }
} 
  802dd0:	e037883a 	mov	sp,fp
  802dd4:	dfc00117 	ldw	ra,4(sp)
  802dd8:	df000017 	ldw	fp,0(sp)
  802ddc:	dec00204 	addi	sp,sp,8
  802de0:	f800283a 	ret

00802de4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802de4:	defffb04 	addi	sp,sp,-20
  802de8:	dfc00415 	stw	ra,16(sp)
  802dec:	df000315 	stw	fp,12(sp)
  802df0:	df000304 	addi	fp,sp,12
  802df4:	e13ffd15 	stw	r4,-12(fp)
  802df8:	e17ffe15 	stw	r5,-8(fp)
  802dfc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802e00:	01002034 	movhi	r4,128
  802e04:	2115d004 	addi	r4,r4,22336
  802e08:	e17ffd17 	ldw	r5,-12(fp)
  802e0c:	01800044 	movi	r6,1
  802e10:	01c07fc4 	movi	r7,511
  802e14:	0802d240 	call	802d24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  802e18:	01002034 	movhi	r4,128
  802e1c:	2115cd04 	addi	r4,r4,22324
  802e20:	e17ffe17 	ldw	r5,-8(fp)
  802e24:	000d883a 	mov	r6,zero
  802e28:	01c07fc4 	movi	r7,511
  802e2c:	0802d240 	call	802d24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802e30:	01002034 	movhi	r4,128
  802e34:	2115d304 	addi	r4,r4,22348
  802e38:	e17fff17 	ldw	r5,-4(fp)
  802e3c:	01800044 	movi	r6,1
  802e40:	01c07fc4 	movi	r7,511
  802e44:	0802d240 	call	802d24 <alt_open_fd>
}  
  802e48:	e037883a 	mov	sp,fp
  802e4c:	dfc00117 	ldw	ra,4(sp)
  802e50:	df000017 	ldw	fp,0(sp)
  802e54:	dec00204 	addi	sp,sp,8
  802e58:	f800283a 	ret

00802e5c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  802e5c:	defff004 	addi	sp,sp,-64
  802e60:	df000f15 	stw	fp,60(sp)
  802e64:	df000f04 	addi	fp,sp,60
  802e68:	e13ffd15 	stw	r4,-12(fp)
  802e6c:	e17ffe15 	stw	r5,-8(fp)
  802e70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  802e74:	00bffa84 	movi	r2,-22
  802e78:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  802e7c:	e0bffd17 	ldw	r2,-12(fp)
  802e80:	10800828 	cmpgeui	r2,r2,32
  802e84:	10005c1e 	bne	r2,zero,802ff8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802e88:	0005303a 	rdctl	r2,status
  802e8c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802e90:	e0fff317 	ldw	r3,-52(fp)
  802e94:	00bfff84 	movi	r2,-2
  802e98:	1884703a 	and	r2,r3,r2
  802e9c:	1001703a 	wrctl	status,r2
  
  return context;
  802ea0:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  802ea4:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  802ea8:	00802034 	movhi	r2,128
  802eac:	109d7404 	addi	r2,r2,30160
  802eb0:	e0fffd17 	ldw	r3,-12(fp)
  802eb4:	180690fa 	slli	r3,r3,3
  802eb8:	10c5883a 	add	r2,r2,r3
  802ebc:	e0ffff17 	ldw	r3,-4(fp)
  802ec0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  802ec4:	00802034 	movhi	r2,128
  802ec8:	109d7404 	addi	r2,r2,30160
  802ecc:	e0fffd17 	ldw	r3,-12(fp)
  802ed0:	180690fa 	slli	r3,r3,3
  802ed4:	18c00104 	addi	r3,r3,4
  802ed8:	10c5883a 	add	r2,r2,r3
  802edc:	e0fffe17 	ldw	r3,-8(fp)
  802ee0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  802ee4:	e0bfff17 	ldw	r2,-4(fp)
  802ee8:	10001f26 	beq	r2,zero,802f68 <alt_irq_register+0x10c>
  802eec:	e0bffd17 	ldw	r2,-12(fp)
  802ef0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802ef4:	0005303a 	rdctl	r2,status
  802ef8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802efc:	e0fff517 	ldw	r3,-44(fp)
  802f00:	00bfff84 	movi	r2,-2
  802f04:	1884703a 	and	r2,r3,r2
  802f08:	1001703a 	wrctl	status,r2
  
  return context;
  802f0c:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802f10:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  802f14:	e0bff417 	ldw	r2,-48(fp)
  802f18:	00c00044 	movi	r3,1
  802f1c:	1884983a 	sll	r2,r3,r2
  802f20:	1007883a 	mov	r3,r2
  802f24:	00802034 	movhi	r2,128
  802f28:	109d6f04 	addi	r2,r2,30140
  802f2c:	10800017 	ldw	r2,0(r2)
  802f30:	1886b03a 	or	r3,r3,r2
  802f34:	00802034 	movhi	r2,128
  802f38:	109d6f04 	addi	r2,r2,30140
  802f3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802f40:	00802034 	movhi	r2,128
  802f44:	109d6f04 	addi	r2,r2,30140
  802f48:	10800017 	ldw	r2,0(r2)
  802f4c:	100170fa 	wrctl	ienable,r2
  802f50:	e0bff617 	ldw	r2,-40(fp)
  802f54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f58:	e0bff717 	ldw	r2,-36(fp)
  802f5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802f60:	0005883a 	mov	r2,zero
  802f64:	00001f06 	br	802fe4 <alt_irq_register+0x188>
  802f68:	e0bffd17 	ldw	r2,-12(fp)
  802f6c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802f70:	0005303a 	rdctl	r2,status
  802f74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802f78:	e0fff917 	ldw	r3,-28(fp)
  802f7c:	00bfff84 	movi	r2,-2
  802f80:	1884703a 	and	r2,r3,r2
  802f84:	1001703a 	wrctl	status,r2
  
  return context;
  802f88:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802f8c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  802f90:	e0bff817 	ldw	r2,-32(fp)
  802f94:	00c00044 	movi	r3,1
  802f98:	1884983a 	sll	r2,r3,r2
  802f9c:	0084303a 	nor	r2,zero,r2
  802fa0:	1007883a 	mov	r3,r2
  802fa4:	00802034 	movhi	r2,128
  802fa8:	109d6f04 	addi	r2,r2,30140
  802fac:	10800017 	ldw	r2,0(r2)
  802fb0:	1886703a 	and	r3,r3,r2
  802fb4:	00802034 	movhi	r2,128
  802fb8:	109d6f04 	addi	r2,r2,30140
  802fbc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802fc0:	00802034 	movhi	r2,128
  802fc4:	109d6f04 	addi	r2,r2,30140
  802fc8:	10800017 	ldw	r2,0(r2)
  802fcc:	100170fa 	wrctl	ienable,r2
  802fd0:	e0bffa17 	ldw	r2,-24(fp)
  802fd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802fd8:	e0bffb17 	ldw	r2,-20(fp)
  802fdc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802fe0:	0005883a 	mov	r2,zero
  802fe4:	e0bff115 	stw	r2,-60(fp)
  802fe8:	e0bff217 	ldw	r2,-56(fp)
  802fec:	e0bffc15 	stw	r2,-16(fp)
  802ff0:	e0bffc17 	ldw	r2,-16(fp)
  802ff4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  802ff8:	e0bff117 	ldw	r2,-60(fp)
}
  802ffc:	e037883a 	mov	sp,fp
  803000:	df000017 	ldw	fp,0(sp)
  803004:	dec00104 	addi	sp,sp,4
  803008:	f800283a 	ret

0080300c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80300c:	defffe04 	addi	sp,sp,-8
  803010:	dfc00115 	stw	ra,4(sp)
  803014:	df000015 	stw	fp,0(sp)
  803018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80301c:	00802034 	movhi	r2,128
  803020:	10973c04 	addi	r2,r2,23792
  803024:	10800017 	ldw	r2,0(r2)
  803028:	10000526 	beq	r2,zero,803040 <alt_get_errno+0x34>
  80302c:	00802034 	movhi	r2,128
  803030:	10973c04 	addi	r2,r2,23792
  803034:	10800017 	ldw	r2,0(r2)
  803038:	103ee83a 	callr	r2
  80303c:	00000206 	br	803048 <alt_get_errno+0x3c>
  803040:	00802034 	movhi	r2,128
  803044:	109d7304 	addi	r2,r2,30156
}
  803048:	e037883a 	mov	sp,fp
  80304c:	dfc00117 	ldw	ra,4(sp)
  803050:	df000017 	ldw	fp,0(sp)
  803054:	dec00204 	addi	sp,sp,8
  803058:	f800283a 	ret

0080305c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80305c:	defffd04 	addi	sp,sp,-12
  803060:	df000215 	stw	fp,8(sp)
  803064:	df000204 	addi	fp,sp,8
  803068:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80306c:	e0bfff17 	ldw	r2,-4(fp)
  803070:	10800217 	ldw	r2,8(r2)
  803074:	10d00034 	orhi	r3,r2,16384
  803078:	e0bfff17 	ldw	r2,-4(fp)
  80307c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803080:	e03ffe15 	stw	zero,-8(fp)
  803084:	00001d06 	br	8030fc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803088:	00802034 	movhi	r2,128
  80308c:	1095cd04 	addi	r2,r2,22324
  803090:	e0fffe17 	ldw	r3,-8(fp)
  803094:	18c00324 	muli	r3,r3,12
  803098:	10c5883a 	add	r2,r2,r3
  80309c:	10c00017 	ldw	r3,0(r2)
  8030a0:	e0bfff17 	ldw	r2,-4(fp)
  8030a4:	10800017 	ldw	r2,0(r2)
  8030a8:	1880111e 	bne	r3,r2,8030f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8030ac:	00802034 	movhi	r2,128
  8030b0:	1095cd04 	addi	r2,r2,22324
  8030b4:	e0fffe17 	ldw	r3,-8(fp)
  8030b8:	18c00324 	muli	r3,r3,12
  8030bc:	18c00204 	addi	r3,r3,8
  8030c0:	10c5883a 	add	r2,r2,r3
  8030c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8030c8:	1000090e 	bge	r2,zero,8030f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8030cc:	e0bffe17 	ldw	r2,-8(fp)
  8030d0:	10c00324 	muli	r3,r2,12
  8030d4:	00802034 	movhi	r2,128
  8030d8:	1095cd04 	addi	r2,r2,22324
  8030dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8030e0:	e0bfff17 	ldw	r2,-4(fp)
  8030e4:	18800226 	beq	r3,r2,8030f0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8030e8:	00bffcc4 	movi	r2,-13
  8030ec:	00000a06 	br	803118 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8030f0:	e0bffe17 	ldw	r2,-8(fp)
  8030f4:	10800044 	addi	r2,r2,1
  8030f8:	e0bffe15 	stw	r2,-8(fp)
  8030fc:	00802034 	movhi	r2,128
  803100:	10973b04 	addi	r2,r2,23788
  803104:	10800017 	ldw	r2,0(r2)
  803108:	1007883a 	mov	r3,r2
  80310c:	e0bffe17 	ldw	r2,-8(fp)
  803110:	18bfdd2e 	bgeu	r3,r2,803088 <__alt_data_end+0xff803088>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  803114:	0005883a 	mov	r2,zero
}
  803118:	e037883a 	mov	sp,fp
  80311c:	df000017 	ldw	fp,0(sp)
  803120:	dec00104 	addi	sp,sp,4
  803124:	f800283a 	ret

00803128 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  803128:	defff604 	addi	sp,sp,-40
  80312c:	dfc00915 	stw	ra,36(sp)
  803130:	df000815 	stw	fp,32(sp)
  803134:	df000804 	addi	fp,sp,32
  803138:	e13ffd15 	stw	r4,-12(fp)
  80313c:	e17ffe15 	stw	r5,-8(fp)
  803140:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  803144:	00bfffc4 	movi	r2,-1
  803148:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80314c:	00bffb44 	movi	r2,-19
  803150:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  803154:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803158:	e13ffd17 	ldw	r4,-12(fp)
  80315c:	01402034 	movhi	r5,128
  803160:	29573904 	addi	r5,r5,23780
  803164:	08036240 	call	803624 <alt_find_dev>
  803168:	e0bff815 	stw	r2,-32(fp)
  80316c:	e0bff817 	ldw	r2,-32(fp)
  803170:	1000051e 	bne	r2,zero,803188 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  803174:	e13ffd17 	ldw	r4,-12(fp)
  803178:	08036b40 	call	8036b4 <alt_find_file>
  80317c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  803180:	00800044 	movi	r2,1
  803184:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803188:	e0bff817 	ldw	r2,-32(fp)
  80318c:	10002926 	beq	r2,zero,803234 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  803190:	e13ff817 	ldw	r4,-32(fp)
  803194:	08037c80 	call	8037c8 <alt_get_fd>
  803198:	e0bff915 	stw	r2,-28(fp)
  80319c:	e0bff917 	ldw	r2,-28(fp)
  8031a0:	1000030e 	bge	r2,zero,8031b0 <open+0x88>
    {
      status = index;
  8031a4:	e0bff917 	ldw	r2,-28(fp)
  8031a8:	e0bffa15 	stw	r2,-24(fp)
  8031ac:	00002306 	br	80323c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  8031b0:	e0bff917 	ldw	r2,-28(fp)
  8031b4:	10c00324 	muli	r3,r2,12
  8031b8:	00802034 	movhi	r2,128
  8031bc:	1095cd04 	addi	r2,r2,22324
  8031c0:	1885883a 	add	r2,r3,r2
  8031c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8031c8:	e0fffe17 	ldw	r3,-8(fp)
  8031cc:	00900034 	movhi	r2,16384
  8031d0:	10bfffc4 	addi	r2,r2,-1
  8031d4:	1886703a 	and	r3,r3,r2
  8031d8:	e0bffc17 	ldw	r2,-16(fp)
  8031dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8031e0:	e0bffb17 	ldw	r2,-20(fp)
  8031e4:	1000051e 	bne	r2,zero,8031fc <open+0xd4>
  8031e8:	e13ffc17 	ldw	r4,-16(fp)
  8031ec:	080305c0 	call	80305c <alt_file_locked>
  8031f0:	e0bffa15 	stw	r2,-24(fp)
  8031f4:	e0bffa17 	ldw	r2,-24(fp)
  8031f8:	10001016 	blt	r2,zero,80323c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8031fc:	e0bff817 	ldw	r2,-32(fp)
  803200:	10800317 	ldw	r2,12(r2)
  803204:	10000826 	beq	r2,zero,803228 <open+0x100>
  803208:	e0bff817 	ldw	r2,-32(fp)
  80320c:	10800317 	ldw	r2,12(r2)
  803210:	e13ffc17 	ldw	r4,-16(fp)
  803214:	e17ffd17 	ldw	r5,-12(fp)
  803218:	e1bffe17 	ldw	r6,-8(fp)
  80321c:	e1ffff17 	ldw	r7,-4(fp)
  803220:	103ee83a 	callr	r2
  803224:	00000106 	br	80322c <open+0x104>
  803228:	0005883a 	mov	r2,zero
  80322c:	e0bffa15 	stw	r2,-24(fp)
  803230:	00000206 	br	80323c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803234:	00bffb44 	movi	r2,-19
  803238:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80323c:	e0bffa17 	ldw	r2,-24(fp)
  803240:	1000090e 	bge	r2,zero,803268 <open+0x140>
  {
    alt_release_fd (index);  
  803244:	e13ff917 	ldw	r4,-28(fp)
  803248:	08032800 	call	803280 <alt_release_fd>
    ALT_ERRNO = -status;
  80324c:	080300c0 	call	80300c <alt_get_errno>
  803250:	1007883a 	mov	r3,r2
  803254:	e0bffa17 	ldw	r2,-24(fp)
  803258:	0085c83a 	sub	r2,zero,r2
  80325c:	18800015 	stw	r2,0(r3)
    return -1;
  803260:	00bfffc4 	movi	r2,-1
  803264:	00000106 	br	80326c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  803268:	e0bff917 	ldw	r2,-28(fp)
}
  80326c:	e037883a 	mov	sp,fp
  803270:	dfc00117 	ldw	ra,4(sp)
  803274:	df000017 	ldw	fp,0(sp)
  803278:	dec00204 	addi	sp,sp,8
  80327c:	f800283a 	ret

00803280 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803280:	defffe04 	addi	sp,sp,-8
  803284:	df000115 	stw	fp,4(sp)
  803288:	df000104 	addi	fp,sp,4
  80328c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803290:	e0bfff17 	ldw	r2,-4(fp)
  803294:	108000d0 	cmplti	r2,r2,3
  803298:	10000d1e 	bne	r2,zero,8032d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80329c:	00802034 	movhi	r2,128
  8032a0:	1095cd04 	addi	r2,r2,22324
  8032a4:	e0ffff17 	ldw	r3,-4(fp)
  8032a8:	18c00324 	muli	r3,r3,12
  8032ac:	18c00204 	addi	r3,r3,8
  8032b0:	10c5883a 	add	r2,r2,r3
  8032b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8032b8:	00802034 	movhi	r2,128
  8032bc:	1095cd04 	addi	r2,r2,22324
  8032c0:	e0ffff17 	ldw	r3,-4(fp)
  8032c4:	18c00324 	muli	r3,r3,12
  8032c8:	10c5883a 	add	r2,r2,r3
  8032cc:	10000015 	stw	zero,0(r2)
  }
}
  8032d0:	e037883a 	mov	sp,fp
  8032d4:	df000017 	ldw	fp,0(sp)
  8032d8:	dec00104 	addi	sp,sp,4
  8032dc:	f800283a 	ret

008032e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8032e0:	defffa04 	addi	sp,sp,-24
  8032e4:	df000515 	stw	fp,20(sp)
  8032e8:	df000504 	addi	fp,sp,20
  8032ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8032f0:	0005303a 	rdctl	r2,status
  8032f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8032f8:	e0fffc17 	ldw	r3,-16(fp)
  8032fc:	00bfff84 	movi	r2,-2
  803300:	1884703a 	and	r2,r3,r2
  803304:	1001703a 	wrctl	status,r2
  
  return context;
  803308:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80330c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  803310:	e0bfff17 	ldw	r2,-4(fp)
  803314:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  803318:	e0bffd17 	ldw	r2,-12(fp)
  80331c:	10800017 	ldw	r2,0(r2)
  803320:	e0fffd17 	ldw	r3,-12(fp)
  803324:	18c00117 	ldw	r3,4(r3)
  803328:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80332c:	e0bffd17 	ldw	r2,-12(fp)
  803330:	10800117 	ldw	r2,4(r2)
  803334:	e0fffd17 	ldw	r3,-12(fp)
  803338:	18c00017 	ldw	r3,0(r3)
  80333c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  803340:	e0bffd17 	ldw	r2,-12(fp)
  803344:	e0fffd17 	ldw	r3,-12(fp)
  803348:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80334c:	e0bffd17 	ldw	r2,-12(fp)
  803350:	e0fffd17 	ldw	r3,-12(fp)
  803354:	10c00015 	stw	r3,0(r2)
  803358:	e0bffb17 	ldw	r2,-20(fp)
  80335c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803360:	e0bffe17 	ldw	r2,-8(fp)
  803364:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  803368:	e037883a 	mov	sp,fp
  80336c:	df000017 	ldw	fp,0(sp)
  803370:	dec00104 	addi	sp,sp,4
  803374:	f800283a 	ret

00803378 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803378:	defffb04 	addi	sp,sp,-20
  80337c:	dfc00415 	stw	ra,16(sp)
  803380:	df000315 	stw	fp,12(sp)
  803384:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803388:	d0a00817 	ldw	r2,-32736(gp)
  80338c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803390:	d0a63b17 	ldw	r2,-26388(gp)
  803394:	10800044 	addi	r2,r2,1
  803398:	d0a63b15 	stw	r2,-26388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80339c:	00002e06 	br	803458 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8033a0:	e0bffd17 	ldw	r2,-12(fp)
  8033a4:	10800017 	ldw	r2,0(r2)
  8033a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8033ac:	e0bffd17 	ldw	r2,-12(fp)
  8033b0:	10800403 	ldbu	r2,16(r2)
  8033b4:	10803fcc 	andi	r2,r2,255
  8033b8:	10000426 	beq	r2,zero,8033cc <alt_tick+0x54>
  8033bc:	d0a63b17 	ldw	r2,-26388(gp)
  8033c0:	1000021e 	bne	r2,zero,8033cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8033c4:	e0bffd17 	ldw	r2,-12(fp)
  8033c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8033cc:	e0bffd17 	ldw	r2,-12(fp)
  8033d0:	10800217 	ldw	r2,8(r2)
  8033d4:	d0e63b17 	ldw	r3,-26388(gp)
  8033d8:	18801d36 	bltu	r3,r2,803450 <alt_tick+0xd8>
  8033dc:	e0bffd17 	ldw	r2,-12(fp)
  8033e0:	10800403 	ldbu	r2,16(r2)
  8033e4:	10803fcc 	andi	r2,r2,255
  8033e8:	1000191e 	bne	r2,zero,803450 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8033ec:	e0bffd17 	ldw	r2,-12(fp)
  8033f0:	10800317 	ldw	r2,12(r2)
  8033f4:	e0fffd17 	ldw	r3,-12(fp)
  8033f8:	18c00517 	ldw	r3,20(r3)
  8033fc:	1809883a 	mov	r4,r3
  803400:	103ee83a 	callr	r2
  803404:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803408:	e0bfff17 	ldw	r2,-4(fp)
  80340c:	1000031e 	bne	r2,zero,80341c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  803410:	e13ffd17 	ldw	r4,-12(fp)
  803414:	08032e00 	call	8032e0 <alt_alarm_stop>
  803418:	00000d06 	br	803450 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80341c:	e0bffd17 	ldw	r2,-12(fp)
  803420:	10c00217 	ldw	r3,8(r2)
  803424:	e0bfff17 	ldw	r2,-4(fp)
  803428:	1887883a 	add	r3,r3,r2
  80342c:	e0bffd17 	ldw	r2,-12(fp)
  803430:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803434:	e0bffd17 	ldw	r2,-12(fp)
  803438:	10c00217 	ldw	r3,8(r2)
  80343c:	d0a63b17 	ldw	r2,-26388(gp)
  803440:	1880032e 	bgeu	r3,r2,803450 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  803444:	e0bffd17 	ldw	r2,-12(fp)
  803448:	00c00044 	movi	r3,1
  80344c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  803450:	e0bffe17 	ldw	r2,-8(fp)
  803454:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803458:	e0fffd17 	ldw	r3,-12(fp)
  80345c:	d0a00804 	addi	r2,gp,-32736
  803460:	18bfcf1e 	bne	r3,r2,8033a0 <__alt_data_end+0xff8033a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  803464:	0001883a 	nop
}
  803468:	e037883a 	mov	sp,fp
  80346c:	dfc00117 	ldw	ra,4(sp)
  803470:	df000017 	ldw	fp,0(sp)
  803474:	dec00204 	addi	sp,sp,8
  803478:	f800283a 	ret

0080347c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80347c:	defffd04 	addi	sp,sp,-12
  803480:	dfc00215 	stw	ra,8(sp)
  803484:	df000115 	stw	fp,4(sp)
  803488:	df000104 	addi	fp,sp,4
  80348c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803490:	e13fff17 	ldw	r4,-4(fp)
  803494:	08034cc0 	call	8034cc <alt_busy_sleep>
}
  803498:	e037883a 	mov	sp,fp
  80349c:	dfc00117 	ldw	ra,4(sp)
  8034a0:	df000017 	ldw	fp,0(sp)
  8034a4:	dec00204 	addi	sp,sp,8
  8034a8:	f800283a 	ret

008034ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8034ac:	deffff04 	addi	sp,sp,-4
  8034b0:	df000015 	stw	fp,0(sp)
  8034b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8034b8:	000170fa 	wrctl	ienable,zero
}
  8034bc:	e037883a 	mov	sp,fp
  8034c0:	df000017 	ldw	fp,0(sp)
  8034c4:	dec00104 	addi	sp,sp,4
  8034c8:	f800283a 	ret

008034cc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8034cc:	defffa04 	addi	sp,sp,-24
  8034d0:	dfc00515 	stw	ra,20(sp)
  8034d4:	df000415 	stw	fp,16(sp)
  8034d8:	df000404 	addi	fp,sp,16
  8034dc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8034e0:	008000c4 	movi	r2,3
  8034e4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8034e8:	e0fffd17 	ldw	r3,-12(fp)
  8034ec:	008003f4 	movhi	r2,15
  8034f0:	10909004 	addi	r2,r2,16960
  8034f4:	1885383a 	mul	r2,r3,r2
  8034f8:	0100bef4 	movhi	r4,763
  8034fc:	213c2004 	addi	r4,r4,-3968
  803500:	100b883a 	mov	r5,r2
  803504:	08041240 	call	804124 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  803508:	01200034 	movhi	r4,32768
  80350c:	213fffc4 	addi	r4,r4,-1
  803510:	100b883a 	mov	r5,r2
  803514:	08041240 	call	804124 <__udivsi3>
  803518:	e13fff17 	ldw	r4,-4(fp)
  80351c:	100b883a 	mov	r5,r2
  803520:	08041240 	call	804124 <__udivsi3>
  803524:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  803528:	e0bffe17 	ldw	r2,-8(fp)
  80352c:	10002a26 	beq	r2,zero,8035d8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  803530:	e03ffc15 	stw	zero,-16(fp)
  803534:	00001706 	br	803594 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  803538:	00a00034 	movhi	r2,32768
  80353c:	10bfffc4 	addi	r2,r2,-1
  803540:	10bfffc4 	addi	r2,r2,-1
  803544:	103ffe1e 	bne	r2,zero,803540 <__alt_data_end+0xff803540>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  803548:	e0fffd17 	ldw	r3,-12(fp)
  80354c:	008003f4 	movhi	r2,15
  803550:	10909004 	addi	r2,r2,16960
  803554:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  803558:	0100bef4 	movhi	r4,763
  80355c:	213c2004 	addi	r4,r4,-3968
  803560:	100b883a 	mov	r5,r2
  803564:	08041240 	call	804124 <__udivsi3>
  803568:	01200034 	movhi	r4,32768
  80356c:	213fffc4 	addi	r4,r4,-1
  803570:	100b883a 	mov	r5,r2
  803574:	08041240 	call	804124 <__udivsi3>
  803578:	1007883a 	mov	r3,r2
  80357c:	e0bfff17 	ldw	r2,-4(fp)
  803580:	10c5c83a 	sub	r2,r2,r3
  803584:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803588:	e0bffc17 	ldw	r2,-16(fp)
  80358c:	10800044 	addi	r2,r2,1
  803590:	e0bffc15 	stw	r2,-16(fp)
  803594:	e0fffc17 	ldw	r3,-16(fp)
  803598:	e0bffe17 	ldw	r2,-8(fp)
  80359c:	18bfe616 	blt	r3,r2,803538 <__alt_data_end+0xff803538>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8035a0:	e0fffd17 	ldw	r3,-12(fp)
  8035a4:	008003f4 	movhi	r2,15
  8035a8:	10909004 	addi	r2,r2,16960
  8035ac:	1885383a 	mul	r2,r3,r2
  8035b0:	0100bef4 	movhi	r4,763
  8035b4:	213c2004 	addi	r4,r4,-3968
  8035b8:	100b883a 	mov	r5,r2
  8035bc:	08041240 	call	804124 <__udivsi3>
  8035c0:	1007883a 	mov	r3,r2
  8035c4:	e0bfff17 	ldw	r2,-4(fp)
  8035c8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8035cc:	10bfffc4 	addi	r2,r2,-1
  8035d0:	103ffe1e 	bne	r2,zero,8035cc <__alt_data_end+0xff8035cc>
  8035d4:	00000d06 	br	80360c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8035d8:	e0fffd17 	ldw	r3,-12(fp)
  8035dc:	008003f4 	movhi	r2,15
  8035e0:	10909004 	addi	r2,r2,16960
  8035e4:	1885383a 	mul	r2,r3,r2
  8035e8:	0100bef4 	movhi	r4,763
  8035ec:	213c2004 	addi	r4,r4,-3968
  8035f0:	100b883a 	mov	r5,r2
  8035f4:	08041240 	call	804124 <__udivsi3>
  8035f8:	1007883a 	mov	r3,r2
  8035fc:	e0bfff17 	ldw	r2,-4(fp)
  803600:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803604:	10bfffc4 	addi	r2,r2,-1
  803608:	00bffe16 	blt	zero,r2,803604 <__alt_data_end+0xff803604>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80360c:	0005883a 	mov	r2,zero
}
  803610:	e037883a 	mov	sp,fp
  803614:	dfc00117 	ldw	ra,4(sp)
  803618:	df000017 	ldw	fp,0(sp)
  80361c:	dec00204 	addi	sp,sp,8
  803620:	f800283a 	ret

00803624 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803624:	defffa04 	addi	sp,sp,-24
  803628:	dfc00515 	stw	ra,20(sp)
  80362c:	df000415 	stw	fp,16(sp)
  803630:	df000404 	addi	fp,sp,16
  803634:	e13ffe15 	stw	r4,-8(fp)
  803638:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80363c:	e0bfff17 	ldw	r2,-4(fp)
  803640:	10800017 	ldw	r2,0(r2)
  803644:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803648:	e13ffe17 	ldw	r4,-8(fp)
  80364c:	0803cc80 	call	803cc8 <strlen>
  803650:	10800044 	addi	r2,r2,1
  803654:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803658:	00000d06 	br	803690 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80365c:	e0bffc17 	ldw	r2,-16(fp)
  803660:	10c00217 	ldw	r3,8(r2)
  803664:	e0bffd17 	ldw	r2,-12(fp)
  803668:	1809883a 	mov	r4,r3
  80366c:	e17ffe17 	ldw	r5,-8(fp)
  803670:	100d883a 	mov	r6,r2
  803674:	08039f00 	call	8039f0 <memcmp>
  803678:	1000021e 	bne	r2,zero,803684 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80367c:	e0bffc17 	ldw	r2,-16(fp)
  803680:	00000706 	br	8036a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  803684:	e0bffc17 	ldw	r2,-16(fp)
  803688:	10800017 	ldw	r2,0(r2)
  80368c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803690:	e0fffc17 	ldw	r3,-16(fp)
  803694:	e0bfff17 	ldw	r2,-4(fp)
  803698:	18bff01e 	bne	r3,r2,80365c <__alt_data_end+0xff80365c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80369c:	0005883a 	mov	r2,zero
}
  8036a0:	e037883a 	mov	sp,fp
  8036a4:	dfc00117 	ldw	ra,4(sp)
  8036a8:	df000017 	ldw	fp,0(sp)
  8036ac:	dec00204 	addi	sp,sp,8
  8036b0:	f800283a 	ret

008036b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8036b4:	defffb04 	addi	sp,sp,-20
  8036b8:	dfc00415 	stw	ra,16(sp)
  8036bc:	df000315 	stw	fp,12(sp)
  8036c0:	df000304 	addi	fp,sp,12
  8036c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8036c8:	00802034 	movhi	r2,128
  8036cc:	10973704 	addi	r2,r2,23772
  8036d0:	10800017 	ldw	r2,0(r2)
  8036d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8036d8:	00003106 	br	8037a0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  8036dc:	e0bffd17 	ldw	r2,-12(fp)
  8036e0:	10800217 	ldw	r2,8(r2)
  8036e4:	1009883a 	mov	r4,r2
  8036e8:	0803cc80 	call	803cc8 <strlen>
  8036ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8036f0:	e0bffd17 	ldw	r2,-12(fp)
  8036f4:	10c00217 	ldw	r3,8(r2)
  8036f8:	e0bffe17 	ldw	r2,-8(fp)
  8036fc:	10bfffc4 	addi	r2,r2,-1
  803700:	1885883a 	add	r2,r3,r2
  803704:	10800003 	ldbu	r2,0(r2)
  803708:	10803fcc 	andi	r2,r2,255
  80370c:	1080201c 	xori	r2,r2,128
  803710:	10bfe004 	addi	r2,r2,-128
  803714:	10800bd8 	cmpnei	r2,r2,47
  803718:	1000031e 	bne	r2,zero,803728 <alt_find_file+0x74>
    {
      len -= 1;
  80371c:	e0bffe17 	ldw	r2,-8(fp)
  803720:	10bfffc4 	addi	r2,r2,-1
  803724:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803728:	e0bffe17 	ldw	r2,-8(fp)
  80372c:	e0ffff17 	ldw	r3,-4(fp)
  803730:	1885883a 	add	r2,r3,r2
  803734:	10800003 	ldbu	r2,0(r2)
  803738:	10803fcc 	andi	r2,r2,255
  80373c:	1080201c 	xori	r2,r2,128
  803740:	10bfe004 	addi	r2,r2,-128
  803744:	10800be0 	cmpeqi	r2,r2,47
  803748:	1000081e 	bne	r2,zero,80376c <alt_find_file+0xb8>
  80374c:	e0bffe17 	ldw	r2,-8(fp)
  803750:	e0ffff17 	ldw	r3,-4(fp)
  803754:	1885883a 	add	r2,r3,r2
  803758:	10800003 	ldbu	r2,0(r2)
  80375c:	10803fcc 	andi	r2,r2,255
  803760:	1080201c 	xori	r2,r2,128
  803764:	10bfe004 	addi	r2,r2,-128
  803768:	10000a1e 	bne	r2,zero,803794 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  80376c:	e0bffd17 	ldw	r2,-12(fp)
  803770:	10c00217 	ldw	r3,8(r2)
  803774:	e0bffe17 	ldw	r2,-8(fp)
  803778:	1809883a 	mov	r4,r3
  80377c:	e17fff17 	ldw	r5,-4(fp)
  803780:	100d883a 	mov	r6,r2
  803784:	08039f00 	call	8039f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803788:	1000021e 	bne	r2,zero,803794 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80378c:	e0bffd17 	ldw	r2,-12(fp)
  803790:	00000806 	br	8037b4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  803794:	e0bffd17 	ldw	r2,-12(fp)
  803798:	10800017 	ldw	r2,0(r2)
  80379c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8037a0:	e0fffd17 	ldw	r3,-12(fp)
  8037a4:	00802034 	movhi	r2,128
  8037a8:	10973704 	addi	r2,r2,23772
  8037ac:	18bfcb1e 	bne	r3,r2,8036dc <__alt_data_end+0xff8036dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8037b0:	0005883a 	mov	r2,zero
}
  8037b4:	e037883a 	mov	sp,fp
  8037b8:	dfc00117 	ldw	ra,4(sp)
  8037bc:	df000017 	ldw	fp,0(sp)
  8037c0:	dec00204 	addi	sp,sp,8
  8037c4:	f800283a 	ret

008037c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8037c8:	defffc04 	addi	sp,sp,-16
  8037cc:	df000315 	stw	fp,12(sp)
  8037d0:	df000304 	addi	fp,sp,12
  8037d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8037d8:	00bffa04 	movi	r2,-24
  8037dc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8037e0:	e03ffd15 	stw	zero,-12(fp)
  8037e4:	00001d06 	br	80385c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  8037e8:	00802034 	movhi	r2,128
  8037ec:	1095cd04 	addi	r2,r2,22324
  8037f0:	e0fffd17 	ldw	r3,-12(fp)
  8037f4:	18c00324 	muli	r3,r3,12
  8037f8:	10c5883a 	add	r2,r2,r3
  8037fc:	10800017 	ldw	r2,0(r2)
  803800:	1000131e 	bne	r2,zero,803850 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  803804:	00802034 	movhi	r2,128
  803808:	1095cd04 	addi	r2,r2,22324
  80380c:	e0fffd17 	ldw	r3,-12(fp)
  803810:	18c00324 	muli	r3,r3,12
  803814:	10c5883a 	add	r2,r2,r3
  803818:	e0ffff17 	ldw	r3,-4(fp)
  80381c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  803820:	00802034 	movhi	r2,128
  803824:	10973b04 	addi	r2,r2,23788
  803828:	10c00017 	ldw	r3,0(r2)
  80382c:	e0bffd17 	ldw	r2,-12(fp)
  803830:	1880040e 	bge	r3,r2,803844 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  803834:	00802034 	movhi	r2,128
  803838:	10973b04 	addi	r2,r2,23788
  80383c:	e0fffd17 	ldw	r3,-12(fp)
  803840:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  803844:	e0bffd17 	ldw	r2,-12(fp)
  803848:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80384c:	00000606 	br	803868 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803850:	e0bffd17 	ldw	r2,-12(fp)
  803854:	10800044 	addi	r2,r2,1
  803858:	e0bffd15 	stw	r2,-12(fp)
  80385c:	e0bffd17 	ldw	r2,-12(fp)
  803860:	10800810 	cmplti	r2,r2,32
  803864:	103fe01e 	bne	r2,zero,8037e8 <__alt_data_end+0xff8037e8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803868:	e0bffe17 	ldw	r2,-8(fp)
}
  80386c:	e037883a 	mov	sp,fp
  803870:	df000017 	ldw	fp,0(sp)
  803874:	dec00104 	addi	sp,sp,4
  803878:	f800283a 	ret

0080387c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80387c:	defffb04 	addi	sp,sp,-20
  803880:	df000415 	stw	fp,16(sp)
  803884:	df000404 	addi	fp,sp,16
  803888:	e13ffe15 	stw	r4,-8(fp)
  80388c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  803890:	e0bfff17 	ldw	r2,-4(fp)
  803894:	10840070 	cmpltui	r2,r2,4097
  803898:	1000021e 	bne	r2,zero,8038a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80389c:	00840004 	movi	r2,4096
  8038a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8038a4:	e0fffe17 	ldw	r3,-8(fp)
  8038a8:	e0bfff17 	ldw	r2,-4(fp)
  8038ac:	1885883a 	add	r2,r3,r2
  8038b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8038b4:	e0bffe17 	ldw	r2,-8(fp)
  8038b8:	e0bffc15 	stw	r2,-16(fp)
  8038bc:	00000506 	br	8038d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8038c0:	e0bffc17 	ldw	r2,-16(fp)
  8038c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8038c8:	e0bffc17 	ldw	r2,-16(fp)
  8038cc:	10800804 	addi	r2,r2,32
  8038d0:	e0bffc15 	stw	r2,-16(fp)
  8038d4:	e0fffc17 	ldw	r3,-16(fp)
  8038d8:	e0bffd17 	ldw	r2,-12(fp)
  8038dc:	18bff836 	bltu	r3,r2,8038c0 <__alt_data_end+0xff8038c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8038e0:	e0bffe17 	ldw	r2,-8(fp)
  8038e4:	108007cc 	andi	r2,r2,31
  8038e8:	10000226 	beq	r2,zero,8038f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8038ec:	e0bffc17 	ldw	r2,-16(fp)
  8038f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8038f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8038f8:	e037883a 	mov	sp,fp
  8038fc:	df000017 	ldw	fp,0(sp)
  803900:	dec00104 	addi	sp,sp,4
  803904:	f800283a 	ret

00803908 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  803908:	defffe04 	addi	sp,sp,-8
  80390c:	df000115 	stw	fp,4(sp)
  803910:	df000104 	addi	fp,sp,4
  803914:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  803918:	e0bfff17 	ldw	r2,-4(fp)
  80391c:	10bffe84 	addi	r2,r2,-6
  803920:	10c00428 	cmpgeui	r3,r2,16
  803924:	18001a1e 	bne	r3,zero,803990 <alt_exception_cause_generated_bad_addr+0x88>
  803928:	100690ba 	slli	r3,r2,2
  80392c:	00802034 	movhi	r2,128
  803930:	108e5004 	addi	r2,r2,14656
  803934:	1885883a 	add	r2,r3,r2
  803938:	10800017 	ldw	r2,0(r2)
  80393c:	1000683a 	jmp	r2
  803940:	00803980 	call	80398 <__reset-0x77fc68>
  803944:	00803980 	call	80398 <__reset-0x77fc68>
  803948:	00803990 	cmplti	r2,zero,230
  80394c:	00803990 	cmplti	r2,zero,230
  803950:	00803990 	cmplti	r2,zero,230
  803954:	00803980 	call	80398 <__reset-0x77fc68>
  803958:	00803988 	cmpgei	r2,zero,230
  80395c:	00803990 	cmplti	r2,zero,230
  803960:	00803980 	call	80398 <__reset-0x77fc68>
  803964:	00803980 	call	80398 <__reset-0x77fc68>
  803968:	00803990 	cmplti	r2,zero,230
  80396c:	00803980 	call	80398 <__reset-0x77fc68>
  803970:	00803988 	cmpgei	r2,zero,230
  803974:	00803990 	cmplti	r2,zero,230
  803978:	00803990 	cmplti	r2,zero,230
  80397c:	00803980 	call	80398 <__reset-0x77fc68>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  803980:	00800044 	movi	r2,1
  803984:	00000306 	br	803994 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803988:	0005883a 	mov	r2,zero
  80398c:	00000106 	br	803994 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  803990:	0005883a 	mov	r2,zero
  }
}
  803994:	e037883a 	mov	sp,fp
  803998:	df000017 	ldw	fp,0(sp)
  80399c:	dec00104 	addi	sp,sp,4
  8039a0:	f800283a 	ret

008039a4 <atexit>:
  8039a4:	200b883a 	mov	r5,r4
  8039a8:	000d883a 	mov	r6,zero
  8039ac:	0009883a 	mov	r4,zero
  8039b0:	000f883a 	mov	r7,zero
  8039b4:	0803d601 	jmpi	803d60 <__register_exitproc>

008039b8 <exit>:
  8039b8:	defffe04 	addi	sp,sp,-8
  8039bc:	000b883a 	mov	r5,zero
  8039c0:	dc000015 	stw	r16,0(sp)
  8039c4:	dfc00115 	stw	ra,4(sp)
  8039c8:	2021883a 	mov	r16,r4
  8039cc:	0803e740 	call	803e74 <__call_exitprocs>
  8039d0:	00802034 	movhi	r2,128
  8039d4:	10974104 	addi	r2,r2,23812
  8039d8:	11000017 	ldw	r4,0(r2)
  8039dc:	20800f17 	ldw	r2,60(r4)
  8039e0:	10000126 	beq	r2,zero,8039e8 <exit+0x30>
  8039e4:	103ee83a 	callr	r2
  8039e8:	8009883a 	mov	r4,r16
  8039ec:	08041340 	call	804134 <_exit>

008039f0 <memcmp>:
  8039f0:	01c000c4 	movi	r7,3
  8039f4:	3980192e 	bgeu	r7,r6,803a5c <memcmp+0x6c>
  8039f8:	2144b03a 	or	r2,r4,r5
  8039fc:	11c4703a 	and	r2,r2,r7
  803a00:	10000f26 	beq	r2,zero,803a40 <memcmp+0x50>
  803a04:	20800003 	ldbu	r2,0(r4)
  803a08:	28c00003 	ldbu	r3,0(r5)
  803a0c:	10c0151e 	bne	r2,r3,803a64 <memcmp+0x74>
  803a10:	31bfff84 	addi	r6,r6,-2
  803a14:	01ffffc4 	movi	r7,-1
  803a18:	00000406 	br	803a2c <memcmp+0x3c>
  803a1c:	20800003 	ldbu	r2,0(r4)
  803a20:	28c00003 	ldbu	r3,0(r5)
  803a24:	31bfffc4 	addi	r6,r6,-1
  803a28:	10c00e1e 	bne	r2,r3,803a64 <memcmp+0x74>
  803a2c:	21000044 	addi	r4,r4,1
  803a30:	29400044 	addi	r5,r5,1
  803a34:	31fff91e 	bne	r6,r7,803a1c <__alt_data_end+0xff803a1c>
  803a38:	0005883a 	mov	r2,zero
  803a3c:	f800283a 	ret
  803a40:	20c00017 	ldw	r3,0(r4)
  803a44:	28800017 	ldw	r2,0(r5)
  803a48:	1880041e 	bne	r3,r2,803a5c <memcmp+0x6c>
  803a4c:	31bfff04 	addi	r6,r6,-4
  803a50:	21000104 	addi	r4,r4,4
  803a54:	29400104 	addi	r5,r5,4
  803a58:	39bff936 	bltu	r7,r6,803a40 <__alt_data_end+0xff803a40>
  803a5c:	303fe91e 	bne	r6,zero,803a04 <__alt_data_end+0xff803a04>
  803a60:	003ff506 	br	803a38 <__alt_data_end+0xff803a38>
  803a64:	10c5c83a 	sub	r2,r2,r3
  803a68:	f800283a 	ret

00803a6c <memcpy>:
  803a6c:	deffff04 	addi	sp,sp,-4
  803a70:	dc000015 	stw	r16,0(sp)
  803a74:	00c003c4 	movi	r3,15
  803a78:	2005883a 	mov	r2,r4
  803a7c:	1980432e 	bgeu	r3,r6,803b8c <memcpy+0x120>
  803a80:	2146b03a 	or	r3,r4,r5
  803a84:	18c000cc 	andi	r3,r3,3
  803a88:	1800421e 	bne	r3,zero,803b94 <memcpy+0x128>
  803a8c:	343ffc04 	addi	r16,r6,-16
  803a90:	8020d13a 	srli	r16,r16,4
  803a94:	28c00104 	addi	r3,r5,4
  803a98:	23400104 	addi	r13,r4,4
  803a9c:	801e913a 	slli	r15,r16,4
  803aa0:	2b000204 	addi	r12,r5,8
  803aa4:	22c00204 	addi	r11,r4,8
  803aa8:	7bc00504 	addi	r15,r15,20
  803aac:	2a800304 	addi	r10,r5,12
  803ab0:	22400304 	addi	r9,r4,12
  803ab4:	2bdf883a 	add	r15,r5,r15
  803ab8:	2811883a 	mov	r8,r5
  803abc:	200f883a 	mov	r7,r4
  803ac0:	41000017 	ldw	r4,0(r8)
  803ac4:	39c00404 	addi	r7,r7,16
  803ac8:	18c00404 	addi	r3,r3,16
  803acc:	393ffc15 	stw	r4,-16(r7)
  803ad0:	1bbffc17 	ldw	r14,-16(r3)
  803ad4:	6b400404 	addi	r13,r13,16
  803ad8:	5ac00404 	addi	r11,r11,16
  803adc:	6bbffc15 	stw	r14,-16(r13)
  803ae0:	63800017 	ldw	r14,0(r12)
  803ae4:	4a400404 	addi	r9,r9,16
  803ae8:	42000404 	addi	r8,r8,16
  803aec:	5bbffc15 	stw	r14,-16(r11)
  803af0:	53800017 	ldw	r14,0(r10)
  803af4:	63000404 	addi	r12,r12,16
  803af8:	52800404 	addi	r10,r10,16
  803afc:	4bbffc15 	stw	r14,-16(r9)
  803b00:	1bffef1e 	bne	r3,r15,803ac0 <__alt_data_end+0xff803ac0>
  803b04:	81c00044 	addi	r7,r16,1
  803b08:	380e913a 	slli	r7,r7,4
  803b0c:	310003cc 	andi	r4,r6,15
  803b10:	02c000c4 	movi	r11,3
  803b14:	11c7883a 	add	r3,r2,r7
  803b18:	29cb883a 	add	r5,r5,r7
  803b1c:	59001f2e 	bgeu	r11,r4,803b9c <memcpy+0x130>
  803b20:	1813883a 	mov	r9,r3
  803b24:	2811883a 	mov	r8,r5
  803b28:	200f883a 	mov	r7,r4
  803b2c:	42800017 	ldw	r10,0(r8)
  803b30:	4a400104 	addi	r9,r9,4
  803b34:	39ffff04 	addi	r7,r7,-4
  803b38:	4abfff15 	stw	r10,-4(r9)
  803b3c:	42000104 	addi	r8,r8,4
  803b40:	59fffa36 	bltu	r11,r7,803b2c <__alt_data_end+0xff803b2c>
  803b44:	213fff04 	addi	r4,r4,-4
  803b48:	2008d0ba 	srli	r4,r4,2
  803b4c:	318000cc 	andi	r6,r6,3
  803b50:	21000044 	addi	r4,r4,1
  803b54:	2109883a 	add	r4,r4,r4
  803b58:	2109883a 	add	r4,r4,r4
  803b5c:	1907883a 	add	r3,r3,r4
  803b60:	290b883a 	add	r5,r5,r4
  803b64:	30000626 	beq	r6,zero,803b80 <memcpy+0x114>
  803b68:	198d883a 	add	r6,r3,r6
  803b6c:	29c00003 	ldbu	r7,0(r5)
  803b70:	18c00044 	addi	r3,r3,1
  803b74:	29400044 	addi	r5,r5,1
  803b78:	19ffffc5 	stb	r7,-1(r3)
  803b7c:	19bffb1e 	bne	r3,r6,803b6c <__alt_data_end+0xff803b6c>
  803b80:	dc000017 	ldw	r16,0(sp)
  803b84:	dec00104 	addi	sp,sp,4
  803b88:	f800283a 	ret
  803b8c:	2007883a 	mov	r3,r4
  803b90:	003ff406 	br	803b64 <__alt_data_end+0xff803b64>
  803b94:	2007883a 	mov	r3,r4
  803b98:	003ff306 	br	803b68 <__alt_data_end+0xff803b68>
  803b9c:	200d883a 	mov	r6,r4
  803ba0:	003ff006 	br	803b64 <__alt_data_end+0xff803b64>

00803ba4 <memset>:
  803ba4:	20c000cc 	andi	r3,r4,3
  803ba8:	2005883a 	mov	r2,r4
  803bac:	18004326 	beq	r3,zero,803cbc <memset+0x118>
  803bb0:	31ffffc4 	addi	r7,r6,-1
  803bb4:	30004026 	beq	r6,zero,803cb8 <memset+0x114>
  803bb8:	2813883a 	mov	r9,r5
  803bbc:	200d883a 	mov	r6,r4
  803bc0:	2007883a 	mov	r3,r4
  803bc4:	00000406 	br	803bd8 <memset+0x34>
  803bc8:	3a3fffc4 	addi	r8,r7,-1
  803bcc:	31800044 	addi	r6,r6,1
  803bd0:	38003926 	beq	r7,zero,803cb8 <memset+0x114>
  803bd4:	400f883a 	mov	r7,r8
  803bd8:	18c00044 	addi	r3,r3,1
  803bdc:	32400005 	stb	r9,0(r6)
  803be0:	1a0000cc 	andi	r8,r3,3
  803be4:	403ff81e 	bne	r8,zero,803bc8 <__alt_data_end+0xff803bc8>
  803be8:	010000c4 	movi	r4,3
  803bec:	21c02d2e 	bgeu	r4,r7,803ca4 <memset+0x100>
  803bf0:	29803fcc 	andi	r6,r5,255
  803bf4:	3008923a 	slli	r4,r6,8
  803bf8:	218cb03a 	or	r6,r4,r6
  803bfc:	3008943a 	slli	r4,r6,16
  803c00:	218cb03a 	or	r6,r4,r6
  803c04:	010003c4 	movi	r4,15
  803c08:	21c0182e 	bgeu	r4,r7,803c6c <memset+0xc8>
  803c0c:	3b3ffc04 	addi	r12,r7,-16
  803c10:	6018d13a 	srli	r12,r12,4
  803c14:	1a000104 	addi	r8,r3,4
  803c18:	1ac00204 	addi	r11,r3,8
  803c1c:	6008913a 	slli	r4,r12,4
  803c20:	1a800304 	addi	r10,r3,12
  803c24:	1813883a 	mov	r9,r3
  803c28:	21000504 	addi	r4,r4,20
  803c2c:	1909883a 	add	r4,r3,r4
  803c30:	49800015 	stw	r6,0(r9)
  803c34:	41800015 	stw	r6,0(r8)
  803c38:	59800015 	stw	r6,0(r11)
  803c3c:	51800015 	stw	r6,0(r10)
  803c40:	42000404 	addi	r8,r8,16
  803c44:	4a400404 	addi	r9,r9,16
  803c48:	5ac00404 	addi	r11,r11,16
  803c4c:	52800404 	addi	r10,r10,16
  803c50:	413ff71e 	bne	r8,r4,803c30 <__alt_data_end+0xff803c30>
  803c54:	63000044 	addi	r12,r12,1
  803c58:	6018913a 	slli	r12,r12,4
  803c5c:	39c003cc 	andi	r7,r7,15
  803c60:	010000c4 	movi	r4,3
  803c64:	1b07883a 	add	r3,r3,r12
  803c68:	21c00e2e 	bgeu	r4,r7,803ca4 <memset+0x100>
  803c6c:	1813883a 	mov	r9,r3
  803c70:	3811883a 	mov	r8,r7
  803c74:	010000c4 	movi	r4,3
  803c78:	49800015 	stw	r6,0(r9)
  803c7c:	423fff04 	addi	r8,r8,-4
  803c80:	4a400104 	addi	r9,r9,4
  803c84:	223ffc36 	bltu	r4,r8,803c78 <__alt_data_end+0xff803c78>
  803c88:	393fff04 	addi	r4,r7,-4
  803c8c:	2008d0ba 	srli	r4,r4,2
  803c90:	39c000cc 	andi	r7,r7,3
  803c94:	21000044 	addi	r4,r4,1
  803c98:	2109883a 	add	r4,r4,r4
  803c9c:	2109883a 	add	r4,r4,r4
  803ca0:	1907883a 	add	r3,r3,r4
  803ca4:	38000426 	beq	r7,zero,803cb8 <memset+0x114>
  803ca8:	19cf883a 	add	r7,r3,r7
  803cac:	19400005 	stb	r5,0(r3)
  803cb0:	18c00044 	addi	r3,r3,1
  803cb4:	19fffd1e 	bne	r3,r7,803cac <__alt_data_end+0xff803cac>
  803cb8:	f800283a 	ret
  803cbc:	2007883a 	mov	r3,r4
  803cc0:	300f883a 	mov	r7,r6
  803cc4:	003fc806 	br	803be8 <__alt_data_end+0xff803be8>

00803cc8 <strlen>:
  803cc8:	208000cc 	andi	r2,r4,3
  803ccc:	10002026 	beq	r2,zero,803d50 <strlen+0x88>
  803cd0:	20800007 	ldb	r2,0(r4)
  803cd4:	10002026 	beq	r2,zero,803d58 <strlen+0x90>
  803cd8:	2005883a 	mov	r2,r4
  803cdc:	00000206 	br	803ce8 <strlen+0x20>
  803ce0:	10c00007 	ldb	r3,0(r2)
  803ce4:	18001826 	beq	r3,zero,803d48 <strlen+0x80>
  803ce8:	10800044 	addi	r2,r2,1
  803cec:	10c000cc 	andi	r3,r2,3
  803cf0:	183ffb1e 	bne	r3,zero,803ce0 <__alt_data_end+0xff803ce0>
  803cf4:	10c00017 	ldw	r3,0(r2)
  803cf8:	01ffbff4 	movhi	r7,65279
  803cfc:	39ffbfc4 	addi	r7,r7,-257
  803d00:	00ca303a 	nor	r5,zero,r3
  803d04:	01a02074 	movhi	r6,32897
  803d08:	19c7883a 	add	r3,r3,r7
  803d0c:	31a02004 	addi	r6,r6,-32640
  803d10:	1946703a 	and	r3,r3,r5
  803d14:	1986703a 	and	r3,r3,r6
  803d18:	1800091e 	bne	r3,zero,803d40 <strlen+0x78>
  803d1c:	10800104 	addi	r2,r2,4
  803d20:	10c00017 	ldw	r3,0(r2)
  803d24:	19cb883a 	add	r5,r3,r7
  803d28:	00c6303a 	nor	r3,zero,r3
  803d2c:	28c6703a 	and	r3,r5,r3
  803d30:	1986703a 	and	r3,r3,r6
  803d34:	183ff926 	beq	r3,zero,803d1c <__alt_data_end+0xff803d1c>
  803d38:	00000106 	br	803d40 <strlen+0x78>
  803d3c:	10800044 	addi	r2,r2,1
  803d40:	10c00007 	ldb	r3,0(r2)
  803d44:	183ffd1e 	bne	r3,zero,803d3c <__alt_data_end+0xff803d3c>
  803d48:	1105c83a 	sub	r2,r2,r4
  803d4c:	f800283a 	ret
  803d50:	2005883a 	mov	r2,r4
  803d54:	003fe706 	br	803cf4 <__alt_data_end+0xff803cf4>
  803d58:	0005883a 	mov	r2,zero
  803d5c:	f800283a 	ret

00803d60 <__register_exitproc>:
  803d60:	00802034 	movhi	r2,128
  803d64:	defffa04 	addi	sp,sp,-24
  803d68:	10974104 	addi	r2,r2,23812
  803d6c:	dc000315 	stw	r16,12(sp)
  803d70:	14000017 	ldw	r16,0(r2)
  803d74:	dc400415 	stw	r17,16(sp)
  803d78:	dfc00515 	stw	ra,20(sp)
  803d7c:	80805217 	ldw	r2,328(r16)
  803d80:	2023883a 	mov	r17,r4
  803d84:	10003626 	beq	r2,zero,803e60 <__register_exitproc+0x100>
  803d88:	10c00117 	ldw	r3,4(r2)
  803d8c:	010007c4 	movi	r4,31
  803d90:	20c00e16 	blt	r4,r3,803dcc <__register_exitproc+0x6c>
  803d94:	1a400044 	addi	r9,r3,1
  803d98:	8800211e 	bne	r17,zero,803e20 <__register_exitproc+0xc0>
  803d9c:	18c00084 	addi	r3,r3,2
  803da0:	18c7883a 	add	r3,r3,r3
  803da4:	18c7883a 	add	r3,r3,r3
  803da8:	12400115 	stw	r9,4(r2)
  803dac:	10c7883a 	add	r3,r2,r3
  803db0:	19400015 	stw	r5,0(r3)
  803db4:	0005883a 	mov	r2,zero
  803db8:	dfc00517 	ldw	ra,20(sp)
  803dbc:	dc400417 	ldw	r17,16(sp)
  803dc0:	dc000317 	ldw	r16,12(sp)
  803dc4:	dec00604 	addi	sp,sp,24
  803dc8:	f800283a 	ret
  803dcc:	00800034 	movhi	r2,0
  803dd0:	10800004 	addi	r2,r2,0
  803dd4:	10002526 	beq	r2,zero,803e6c <__register_exitproc+0x10c>
  803dd8:	01006404 	movi	r4,400
  803ddc:	d9400015 	stw	r5,0(sp)
  803de0:	d9800115 	stw	r6,4(sp)
  803de4:	d9c00215 	stw	r7,8(sp)
  803de8:	00000000 	call	0 <__reset-0x800000>
  803dec:	d9400017 	ldw	r5,0(sp)
  803df0:	d9800117 	ldw	r6,4(sp)
  803df4:	d9c00217 	ldw	r7,8(sp)
  803df8:	10001c26 	beq	r2,zero,803e6c <__register_exitproc+0x10c>
  803dfc:	80c05217 	ldw	r3,328(r16)
  803e00:	10000115 	stw	zero,4(r2)
  803e04:	02400044 	movi	r9,1
  803e08:	10c00015 	stw	r3,0(r2)
  803e0c:	80805215 	stw	r2,328(r16)
  803e10:	10006215 	stw	zero,392(r2)
  803e14:	10006315 	stw	zero,396(r2)
  803e18:	0007883a 	mov	r3,zero
  803e1c:	883fdf26 	beq	r17,zero,803d9c <__alt_data_end+0xff803d9c>
  803e20:	18d1883a 	add	r8,r3,r3
  803e24:	4211883a 	add	r8,r8,r8
  803e28:	1211883a 	add	r8,r2,r8
  803e2c:	41802215 	stw	r6,136(r8)
  803e30:	01000044 	movi	r4,1
  803e34:	11806217 	ldw	r6,392(r2)
  803e38:	20c8983a 	sll	r4,r4,r3
  803e3c:	310cb03a 	or	r6,r6,r4
  803e40:	11806215 	stw	r6,392(r2)
  803e44:	41c04215 	stw	r7,264(r8)
  803e48:	01800084 	movi	r6,2
  803e4c:	89bfd31e 	bne	r17,r6,803d9c <__alt_data_end+0xff803d9c>
  803e50:	11806317 	ldw	r6,396(r2)
  803e54:	3108b03a 	or	r4,r6,r4
  803e58:	11006315 	stw	r4,396(r2)
  803e5c:	003fcf06 	br	803d9c <__alt_data_end+0xff803d9c>
  803e60:	80805304 	addi	r2,r16,332
  803e64:	80805215 	stw	r2,328(r16)
  803e68:	003fc706 	br	803d88 <__alt_data_end+0xff803d88>
  803e6c:	00bfffc4 	movi	r2,-1
  803e70:	003fd106 	br	803db8 <__alt_data_end+0xff803db8>

00803e74 <__call_exitprocs>:
  803e74:	00802034 	movhi	r2,128
  803e78:	10974104 	addi	r2,r2,23812
  803e7c:	10800017 	ldw	r2,0(r2)
  803e80:	defff404 	addi	sp,sp,-48
  803e84:	dd800815 	stw	r22,32(sp)
  803e88:	d8800015 	stw	r2,0(sp)
  803e8c:	10805204 	addi	r2,r2,328
  803e90:	dd000615 	stw	r20,24(sp)
  803e94:	dc800415 	stw	r18,16(sp)
  803e98:	dfc00b15 	stw	ra,44(sp)
  803e9c:	df000a15 	stw	fp,40(sp)
  803ea0:	ddc00915 	stw	r23,36(sp)
  803ea4:	dd400715 	stw	r21,28(sp)
  803ea8:	dcc00515 	stw	r19,20(sp)
  803eac:	dc400315 	stw	r17,12(sp)
  803eb0:	dc000215 	stw	r16,8(sp)
  803eb4:	2025883a 	mov	r18,r4
  803eb8:	2829883a 	mov	r20,r5
  803ebc:	d8800115 	stw	r2,4(sp)
  803ec0:	05bfffc4 	movi	r22,-1
  803ec4:	d8800017 	ldw	r2,0(sp)
  803ec8:	14c05217 	ldw	r19,328(r2)
  803ecc:	98001d26 	beq	r19,zero,803f44 <__call_exitprocs+0xd0>
  803ed0:	dd400117 	ldw	r21,4(sp)
  803ed4:	98800117 	ldw	r2,4(r19)
  803ed8:	173fffc4 	addi	fp,r2,-1
  803edc:	e0000d16 	blt	fp,zero,803f14 <__call_exitprocs+0xa0>
  803ee0:	14000044 	addi	r16,r2,1
  803ee4:	8421883a 	add	r16,r16,r16
  803ee8:	8421883a 	add	r16,r16,r16
  803eec:	84402004 	addi	r17,r16,128
  803ef0:	9c63883a 	add	r17,r19,r17
  803ef4:	9c21883a 	add	r16,r19,r16
  803ef8:	a0001e26 	beq	r20,zero,803f74 <__call_exitprocs+0x100>
  803efc:	80804017 	ldw	r2,256(r16)
  803f00:	15001c26 	beq	r2,r20,803f74 <__call_exitprocs+0x100>
  803f04:	e73fffc4 	addi	fp,fp,-1
  803f08:	843fff04 	addi	r16,r16,-4
  803f0c:	8c7fff04 	addi	r17,r17,-4
  803f10:	e5bff91e 	bne	fp,r22,803ef8 <__alt_data_end+0xff803ef8>
  803f14:	00800034 	movhi	r2,0
  803f18:	10800004 	addi	r2,r2,0
  803f1c:	10000926 	beq	r2,zero,803f44 <__call_exitprocs+0xd0>
  803f20:	98800117 	ldw	r2,4(r19)
  803f24:	1000311e 	bne	r2,zero,803fec <__call_exitprocs+0x178>
  803f28:	98800017 	ldw	r2,0(r19)
  803f2c:	10003426 	beq	r2,zero,804000 <__call_exitprocs+0x18c>
  803f30:	9809883a 	mov	r4,r19
  803f34:	a8800015 	stw	r2,0(r21)
  803f38:	00000000 	call	0 <__reset-0x800000>
  803f3c:	acc00017 	ldw	r19,0(r21)
  803f40:	983fe41e 	bne	r19,zero,803ed4 <__alt_data_end+0xff803ed4>
  803f44:	dfc00b17 	ldw	ra,44(sp)
  803f48:	df000a17 	ldw	fp,40(sp)
  803f4c:	ddc00917 	ldw	r23,36(sp)
  803f50:	dd800817 	ldw	r22,32(sp)
  803f54:	dd400717 	ldw	r21,28(sp)
  803f58:	dd000617 	ldw	r20,24(sp)
  803f5c:	dcc00517 	ldw	r19,20(sp)
  803f60:	dc800417 	ldw	r18,16(sp)
  803f64:	dc400317 	ldw	r17,12(sp)
  803f68:	dc000217 	ldw	r16,8(sp)
  803f6c:	dec00c04 	addi	sp,sp,48
  803f70:	f800283a 	ret
  803f74:	98800117 	ldw	r2,4(r19)
  803f78:	80c00017 	ldw	r3,0(r16)
  803f7c:	10bfffc4 	addi	r2,r2,-1
  803f80:	17001526 	beq	r2,fp,803fd8 <__call_exitprocs+0x164>
  803f84:	80000015 	stw	zero,0(r16)
  803f88:	183fde26 	beq	r3,zero,803f04 <__alt_data_end+0xff803f04>
  803f8c:	00800044 	movi	r2,1
  803f90:	1708983a 	sll	r4,r2,fp
  803f94:	98806217 	ldw	r2,392(r19)
  803f98:	9dc00117 	ldw	r23,4(r19)
  803f9c:	2084703a 	and	r2,r4,r2
  803fa0:	1000061e 	bne	r2,zero,803fbc <__call_exitprocs+0x148>
  803fa4:	183ee83a 	callr	r3
  803fa8:	98800117 	ldw	r2,4(r19)
  803fac:	15ffc51e 	bne	r2,r23,803ec4 <__alt_data_end+0xff803ec4>
  803fb0:	a8800017 	ldw	r2,0(r21)
  803fb4:	14ffd326 	beq	r2,r19,803f04 <__alt_data_end+0xff803f04>
  803fb8:	003fc206 	br	803ec4 <__alt_data_end+0xff803ec4>
  803fbc:	98806317 	ldw	r2,396(r19)
  803fc0:	2084703a 	and	r2,r4,r2
  803fc4:	1000061e 	bne	r2,zero,803fe0 <__call_exitprocs+0x16c>
  803fc8:	89400017 	ldw	r5,0(r17)
  803fcc:	9009883a 	mov	r4,r18
  803fd0:	183ee83a 	callr	r3
  803fd4:	003ff406 	br	803fa8 <__alt_data_end+0xff803fa8>
  803fd8:	9f000115 	stw	fp,4(r19)
  803fdc:	003fea06 	br	803f88 <__alt_data_end+0xff803f88>
  803fe0:	89000017 	ldw	r4,0(r17)
  803fe4:	183ee83a 	callr	r3
  803fe8:	003fef06 	br	803fa8 <__alt_data_end+0xff803fa8>
  803fec:	98800017 	ldw	r2,0(r19)
  803ff0:	982b883a 	mov	r21,r19
  803ff4:	1027883a 	mov	r19,r2
  803ff8:	983fb61e 	bne	r19,zero,803ed4 <__alt_data_end+0xff803ed4>
  803ffc:	003fd106 	br	803f44 <__alt_data_end+0xff803f44>
  804000:	0005883a 	mov	r2,zero
  804004:	003ffa06 	br	803ff0 <__alt_data_end+0xff803ff0>

00804008 <udivmodsi4>:
  804008:	2900182e 	bgeu	r5,r4,80406c <udivmodsi4+0x64>
  80400c:	28001716 	blt	r5,zero,80406c <udivmodsi4+0x64>
  804010:	00800804 	movi	r2,32
  804014:	00c00044 	movi	r3,1
  804018:	00000206 	br	804024 <udivmodsi4+0x1c>
  80401c:	10001126 	beq	r2,zero,804064 <udivmodsi4+0x5c>
  804020:	28000516 	blt	r5,zero,804038 <udivmodsi4+0x30>
  804024:	294b883a 	add	r5,r5,r5
  804028:	10bfffc4 	addi	r2,r2,-1
  80402c:	18c7883a 	add	r3,r3,r3
  804030:	293ffa36 	bltu	r5,r4,80401c <__alt_data_end+0xff80401c>
  804034:	18000b26 	beq	r3,zero,804064 <udivmodsi4+0x5c>
  804038:	0005883a 	mov	r2,zero
  80403c:	21400236 	bltu	r4,r5,804048 <udivmodsi4+0x40>
  804040:	2149c83a 	sub	r4,r4,r5
  804044:	10c4b03a 	or	r2,r2,r3
  804048:	1806d07a 	srli	r3,r3,1
  80404c:	280ad07a 	srli	r5,r5,1
  804050:	183ffa1e 	bne	r3,zero,80403c <__alt_data_end+0xff80403c>
  804054:	3000011e 	bne	r6,zero,80405c <udivmodsi4+0x54>
  804058:	f800283a 	ret
  80405c:	2005883a 	mov	r2,r4
  804060:	f800283a 	ret
  804064:	0005883a 	mov	r2,zero
  804068:	003ffa06 	br	804054 <__alt_data_end+0xff804054>
  80406c:	00c00044 	movi	r3,1
  804070:	003ff106 	br	804038 <__alt_data_end+0xff804038>

00804074 <__divsi3>:
  804074:	defffe04 	addi	sp,sp,-8
  804078:	dfc00115 	stw	ra,4(sp)
  80407c:	dc000015 	stw	r16,0(sp)
  804080:	20000b16 	blt	r4,zero,8040b0 <__divsi3+0x3c>
  804084:	0021883a 	mov	r16,zero
  804088:	28000c16 	blt	r5,zero,8040bc <__divsi3+0x48>
  80408c:	000d883a 	mov	r6,zero
  804090:	08040080 	call	804008 <udivmodsi4>
  804094:	0407c83a 	sub	r3,zero,r16
  804098:	1884f03a 	xor	r2,r3,r2
  80409c:	1405883a 	add	r2,r2,r16
  8040a0:	dfc00117 	ldw	ra,4(sp)
  8040a4:	dc000017 	ldw	r16,0(sp)
  8040a8:	dec00204 	addi	sp,sp,8
  8040ac:	f800283a 	ret
  8040b0:	0109c83a 	sub	r4,zero,r4
  8040b4:	04000044 	movi	r16,1
  8040b8:	283ff40e 	bge	r5,zero,80408c <__alt_data_end+0xff80408c>
  8040bc:	014bc83a 	sub	r5,zero,r5
  8040c0:	8400005c 	xori	r16,r16,1
  8040c4:	003ff106 	br	80408c <__alt_data_end+0xff80408c>

008040c8 <__modsi3>:
  8040c8:	defffd04 	addi	sp,sp,-12
  8040cc:	dfc00215 	stw	ra,8(sp)
  8040d0:	dc400115 	stw	r17,4(sp)
  8040d4:	dc000015 	stw	r16,0(sp)
  8040d8:	20000c16 	blt	r4,zero,80410c <__modsi3+0x44>
  8040dc:	0023883a 	mov	r17,zero
  8040e0:	0021883a 	mov	r16,zero
  8040e4:	28000d16 	blt	r5,zero,80411c <__modsi3+0x54>
  8040e8:	01800044 	movi	r6,1
  8040ec:	08040080 	call	804008 <udivmodsi4>
  8040f0:	1404f03a 	xor	r2,r2,r16
  8040f4:	8885883a 	add	r2,r17,r2
  8040f8:	dfc00217 	ldw	ra,8(sp)
  8040fc:	dc400117 	ldw	r17,4(sp)
  804100:	dc000017 	ldw	r16,0(sp)
  804104:	dec00304 	addi	sp,sp,12
  804108:	f800283a 	ret
  80410c:	0109c83a 	sub	r4,zero,r4
  804110:	04400044 	movi	r17,1
  804114:	043fffc4 	movi	r16,-1
  804118:	283ff30e 	bge	r5,zero,8040e8 <__alt_data_end+0xff8040e8>
  80411c:	014bc83a 	sub	r5,zero,r5
  804120:	003ff106 	br	8040e8 <__alt_data_end+0xff8040e8>

00804124 <__udivsi3>:
  804124:	000d883a 	mov	r6,zero
  804128:	08040081 	jmpi	804008 <udivmodsi4>

0080412c <__umodsi3>:
  80412c:	01800044 	movi	r6,1
  804130:	08040081 	jmpi	804008 <udivmodsi4>

00804134 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  804134:	defffd04 	addi	sp,sp,-12
  804138:	df000215 	stw	fp,8(sp)
  80413c:	df000204 	addi	fp,sp,8
  804140:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  804144:	0001883a 	nop
  804148:	e0bfff17 	ldw	r2,-4(fp)
  80414c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  804150:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  804154:	10000226 	beq	r2,zero,804160 <_exit+0x2c>
    ALT_SIM_FAIL();
  804158:	002af070 	cmpltui	zero,zero,43969
  80415c:	00000106 	br	804164 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  804160:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  804164:	003fff06 	br	804164 <__alt_data_end+0xff804164>
